.. include:: <isonum.txt>
.. include:: ../userguide/src/roles.txt

=====================================
  Robot Framework Quick Start Guide
=====================================

| Copyright |copy| Nokia Siemens Networks 2008
| Licensed under the Apache License, Version 2.0


.. contents:: Table of Contents
   :depth: 2


Introduction
============

Overview
--------

Robot Framework is a keyword-based test automation tool.  Tests live
in html test files and make use of keywords implemented in test libraries to
drive the software under test.

Because Robot Framework is flexible and extensible, it is ideally
suited to testing complex software with a variety of interfaces: GUI,
Web, command line, Web services, etc.  

This guide is designed to introduce the basic concepts of Robot Framework.
For a detailed technical description, please refer to `Robot Framework User 
Guide`_.

.. _User Guide: http://code.google.com/p/robotframework/wiki/UserGuide
.. _Robot Framework User Guide: `User Guide`_


Installation
------------

Before Robot Framework can be installed, Python must be installed.
In addition, to use test libraries written in Java, Jython must be
installed. To run this quickstart, Python is enough.

There are three different ways to install Robot Framework, of which the most 
suitable can be chosen:

1. There is a binary installer for Windows platform. It is enough to
   double-click the installer and follow instructions.
2. On every platform, Robot Framework can be installed from source. To install
   from source, extract the distribution and run command `python setup.py
   install`
3. Robot Framework can be installed using easy_install by issuing comand
   `easy_install robotframework`

After the framework is installed, it is useful to include the directory
containing start-up scipts in PATH environment variable. In Linux this
actually happens automatically, in Windows this must be done from 'Control
Panel -> System -> Advanced -> Environment Variables' by adding e.g.
C:\\Python25\\Scripts to PATH.

Successful installation can be verified with command `pybot --version` which
should output something like::

    $ pybot --version
    Robot 2.0.1 (Python 2.5.2 on linux2)

Detailed installation instructions can be found from the `user guide`_.


Running this demo
-----------------

To run this demo, open a command shell, cd to this directory, and type
the following command at the command line::

   pybot quickstart.html

The tests in this file will execute and generate the following reports:

:path:`report.html`
   the test results summary
:path:`log.html`
   the test results details
:path:`output.xml`
   the test results in a portable XML format for integration with other tools

Open `report.html`__ (note: the link works only after this guide has been 
executed at least once) in your browser, then click on the links to explore
the results. The :path:`report.html` file links to the :path:`log.html` file.

__ report.html

There are also a number of command line options that can be used to control
the test execution and generated outputs. Complete list can be viewed by
issuing `pybot --help`. The following command changes the name of the log
file and the name of the top level suite in the report and log::
    
    pybot --log mylog.html --name My_Fine_Tests quickstart.html


Introducing the sample application
----------------------------------

The sample application for this paper is a variation on a classic
login example: it’s a command-line based authentication server written
in Python. At the moment, the sample application allows a user to do
three things:

   * Create an account with a valid password
   * Log in with a valid user name and password
   * Change the password of an existing account

Attempting to log in with a non-existent user account or with an invalid password results in the same error message::

    Access Denied

Creating a user account with valid password results in the message::

    SUCCESS

There are two requirements that a password must fulfill to be valid: it must
be between 7-12 characters long, and it must contain lower and upper case
letters and numbers, but it must not contain special characters. Trying to
create a user with invalid password results in one of the following messages::

    Creating user failed: Password must be 7-12 characters long
    Creating user failed: Password must be a combination of lowercase and
    uppercase letters and numbers

Changing password with invalid credentials results in the same error message
as logging in with invalid credentials. The validity of new password is
verified and if not valid, an error message is given.

And logging in successfully results in the message::

    Logged In

So, for example, if I issue the following commands, I should get the following responses::

    > python sut/login.py login fred P4ssw0rd
    Access Denied

    > python sut/login.py create fred P4ssw0rd
    SUCCESS

    > python sut/login.py login fred P4ssw0rd
    Logged In

    > python sut/login.py change-password freddy P4ssw0rd dr0wss4P
    Access Denied

    > python sut/login.py change-password fred P4ssw0rd dr0wss4P
    SUCCESS

That’s all our little sample application does just at the moment.
It’s not much.  But it’s a start.  Now we need to add some new
capabilities to it.


Test cases
==========

First test cases
----------------

Robot Framework test cases are created using a simple tabular syntax. For example the following table has two tests:

   * User can create an account and log in
   * User cannot log in with bad password

.. table:: 
   :class: example

   =====================================  =================================  ==============  ==============
               Test Case                                Action                  Argument        Argument
   =====================================  =================================  ==============  ==============
   User can create an account and log in  Create Valid User                  fred            P4ssw0rd
   \                                      Attempt to Login with Credentials  fred            P4ssw0rd
   \                                      Status Should Be                   Logged In       \
   \                                      \                                  \               \
   User cannot log in with bad password   Create Valid User                  betty           P4ssw0rd
   \                                      Attempt to Login with Credentials  betty           wrong
   \                                      Status Should Be                   Access Denied   \    
   =====================================  =================================  ==============  ==============


Notice that these tests read almost like a manual test written in
English rather than like an automated test. Robot Framework uses the
keyword-driven approach that supports writing tests that capture the
essence of the actions and expectations in natural language. Test
cases are constructed from keywords (normaly in the second column) and
their possible arguments .


Higher-level test cases
-----------------------

Test cases can also be created using only high-level keywords that
take no arguments. This style allows using totally free text which is
suitable for communication even with non-technical customers or
other stakeholers. Robot Framework does not enforce any particular
style for writing test cases, and it is possible to use for example
*given-when-then* format popularized by `behaviour-driven development`__
(BDD) like in the example below.

__ http://en.wikipedia.org/wiki/Behavior_driven_development


.. table:: 
   :class: example

   ========================  ===========================================
           Test Case                           Steps             
   ========================  ===========================================
   User can change password  Given a user has a valid account
   \                         when she changes her password
   \                         then she can log in with the new password
   \                         and she cannot use the old password anymore
   ========================  ===========================================


This kind of use-case or user-story-like test cases are ideally suited
for *acceptance test-driven development* (ATTD). In ATTD acceptance
tests are written before implementing actual product features and they
act also as requirements.


Data-driven test cases
----------------------

Quite often several test cases are otherwise similar but they have
slightly different input or output data. In these situations
*data-driven* test cases, like six tests below, allow varying the test
data without duplicating the workflow.

.. table:: 
   :class: example

   ==================================  ===============================================  =============  ======================
                Test Case                                    Action                       Password     Expected error message
   ==================================  ===============================================  =============  ======================
   Too short password                  Creating user with invalid password should fail  abCD5          ${PWD INVALID LENGTH}
   Too long password                   Creating user with invalid password should fail  abCD567890123  ${PWD INVALID LENGTH}
   Password without lowercase letters  Creating user with invalid password should fail  123DEFG        ${PWD INVALID CONTENT}
   Password without capital letters    Creating user with invalid password should fail  abcd56789      ${PWD INVALID CONTENT}
   Password without numbers            Creating user with invalid password should fail  AbCdEfGh       ${PWD INVALID CONTENT}
   Password with special characters    Creating user with invalid password should fail  abCD56+        ${PWD INVALID CONTENT}
   ==================================  ===============================================  =============  ======================

In these tests there is only one keyword (:name:`Creating user with
invalid password should fail`) per test case, and it is responsible
for trying to create a user with the provided password and checking
that creation fails with an expected error message. Notice that the error
messages are specified using variables_.


Keywords
========

TODO: Peke

Keywords that test cases are created from come from two
sources. Lowest level keywords are always created in *test libraries*
using standard programming languages.  In addition to that, users can
create new higher-level keywords using the same tabular syntax that is
used for creating test cases.


Library keywords
----------------

http://code.google.com/p/robotframework/wiki/TestLibraries

Built-in keywords
'''''''''''''''''

The keywords included with Robot Framework,
including generally useful keywords such as "Get Time" and "Should
Be Equal".  For a complete list of the available built-in keywords
see BuiltInLibrary wikipage.

Standard libraries
''''''''''''''''''

Keywords defined in a Robot Framework Library. (More on Libraries
later. The keyword "Create Valid User" from the previous tests is a
User Keyword.)

Robot Framework comes with a handful of libraries including an
:name:`OperatingSystem` library to support common operating system functions,
and a :name:`Screenshot` library for taking screenshots.  In addition, there
are other libraries distributed in separate open source projects, such
as a Selenium library for Web testing.


.. table:: 
   :class: example

   ===============  ========================
       Setting                Value
   ===============  ========================
   Library          OperatingSystem
   Library          testlibs/LoginLibrary.py
   ===============  ========================


User-defined keywords
---------------------

Keywords defined in a Keywords table either in the test file, or in
a resources file for a test suite. (More on test suites later.)
For example:

.. table:: 
   :class: example

   ===============================================  =================================  =======================================  =================
                   Keyword                                         Action                              Argument                      Argument
   ===============================================  =================================  =======================================  =================
   Clear login database                             Remove file                        ${DATABASE FILE}                         \
   \                                                \                                  \                                        \
   Create valid user                                [Arguments]                        ${username}                              ${password}
   \                                                Create user                        ${username}                              ${password}
   \                                                Status should be                   SUCCESS                                  \
   \                                                \                                  \                                        \
   Creating user with invalid password should fail  [Arguments]                        ${password}                              ${expected_error}
   \                                                Create user                        example                                  ${password}
   \                                                Status should be                   Creating user failed: ${expected_error}  \
   \                                                \                                  \                                        \
   Given a user has a valid account                 Create valid user                  ${USERNAME}                              ${PASSWORD}
   \                                                \                                  \                                        \
   When she changes her password                    Change password                    ${USERNAME}                              ${PASSWORD}
   \                                                ...                                ${NEW PASSWORD}                          \
   \                                                Status should be                   SUCCESS                                  \
   \                                                \                                  \                                        \
   Then she can log in with the new password        Attempt to login with credentials  ${USERNAME}                              ${NEW PASSWORD}
   \                                                Status should be                   Logged In                                \
   \                                                \                                  \                                        \
   And she cannot use the old password anymore      Attempt to login with credentials  ${USERNAME}                              ${PASSWORD}
   \                                                Status should be                   Access Denied                            \
   ===============================================  =================================  =======================================  =================


User-defined keywords can include actions defined by other
user-defined keywords, built-in keywords, or library keywords.  As you
can see from this example, User-defined keywords can take parameters.
They can also return values and even contain FOR loops. For now, the
important thing to know is that User-defined keywords enable test
creators to create reusable steps for common action sequences.
User-defined keywords can also help the test author keep the tests as
readable as possible.


Variables
=========

Defining Variables
------------------

Variables are an integral part of Robot Framework. Usually any data used in
tests that is subject to change is best defined as variables. Syntax for
variable definition is quite simple, as seen in this table:

.. table:: 
   :class: example

   ======================  =============================================================================  
          Variable                                           Value
   ======================  ============================================================================= 
   ${USERNAME}             janedoe
   ${PASSWORD}             J4n3d03
   ${NEW PASSWORD}         30d3n4J
   \                       \
   ${DATABASE FILE}        ${TEMPDIR}${/}robotframework-quickstart-db.txt
   \                       \
   ${PWD INVALID LENGTH}   Password must be 7-12 characters long
   ${PWD INVALID CONTENT}  Password must be a combination of lowercase and uppercase letters and numbers 
   ======================  =============================================================================


In addition to user defined variables , there are some built-in variables that 
are always available. :var:`${TEMPDIR}` in the above table is one such variable.
Variables can also be given from the command line which is useful if the tests
need to be executed in different environements. Variables can also be defined
in variable files.


Using Variables
---------------

Variables can be used in most places in the test data, most commonly as
arguments to keywords. Also all settings allow variables in their values.
Additionally, it is possible for keywords to return value(s) that can be
assigned to variable(s) and further used. 

User keyword :name:`Verify database content` used in the following test case
demonstrates the use of a variable to capture return value of a keyword (in
this case :name:`Get File` from :name:`OperatingSystem` test library) and
making assertions against it:

.. table:: 
   :class: example

   =====================================  =================================  =========  ========  ========
               Test Case                                 Action              Argument   Argument  Argument
   =====================================  =================================  =========  ========  ========
   Logging in changes the status of user  Create Valid User                  fred       P4ssw0rd  \
   \                                      Verify database content            fred       P4ssw0rd  Inactive 
   \                                      Attempt to Login with Credentials  fred       P4ssw0rd  \
   \                                      Status Should Be                   Logged In  \         \
   \                                      Verify database content            fred       P4ssw0rd  Active  
   =====================================  =================================  =========  ========  ========



.. table:: 
   :class: example

   =======================  ==============  ===========  =====================================  =========
        Keyword                Action        Argument                Argument                   Argument
   =======================  ==============  ===========  =====================================  =========
   Verify database content  [Arguments]     ${username}  ${password}                            ${status}  
   \                        ${database} =   Get File     ${DATABASE FILE}                       \
   \                        Should Contain  ${database}  ${username}\\t${password}\\t${status}  \
   =======================  ==============  ===========  =====================================  =========


Organizing test cases
=====================

TODO: Peke

Test suites
-----------

File and directory suites


Setup and teardown
------------------

If you want a set of actions to occur before and after each test
executes, use the Test Setup and Test Teardown settings in the Setting
table like so:

.. table:: 
   :class: example

   ===============  ========================
       Setting                Value
   ===============  ========================
   Test Setup       Clear Login Database
   Test Teardown    \
   ===============  ========================


Similarly you can use the Suite Setup and Suite Teardown settings to
specify actions to be executed before and after an entire test suite
executes.


Using tags
----------

.. table:: 
   :class: example

   ============  ===========  ===========
      Setting       Value        Value
   ============  ===========  ===========
   Default Tags  quickstart   example
   ============  ===========  =========== 

Also for single test case, usages: filtering, critical tests, statistics


Creating test libraries
=======================

Robot Framework offers a simple API for creating test libraries, both with
Python and Java. The `user guide`_ contains detailed description with examples.

Below is the source code for the test library used in this guide. You can see, 
for example, how the keyword :name:`Create User` is mapped to actual
implementation of method :code:`create_user`.

.. sourcecode:: python 
   
  testlibs/LoginLibrary.py 


