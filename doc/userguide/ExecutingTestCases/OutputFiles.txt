Output files
------------

.. contents::
   :depth: 2
   :local:

Different outputs
~~~~~~~~~~~~~~~~~~


Output
''''''

The output file contains the test execution results in XML format. Report,
log and summary files are generated from the information in the output file.
Default name for output file is output.xml

Report
''''''

The report file contains overview of results of the test execution.
It has summary information by suite and by tag, and also contains details
by suite, where status of each test case can be individually seen. The
report file also contains links to the log file for easy navigation to 
more detailed information when necessary. Default name for report file 
is report.html.

.. figure:: report.png
   :width: 600
   :height: 568

   Example report file

Log
'''

The log file contains details about test cases that were executed. It
has a hierarchical structure, showing suite, test and keyword details.
Default name for log file is log.html.

.. figure:: log.png
   :width: 500
   :height: 534

   Example log file

Summary report
''''''''''''''

The summary report is even more high level overview of the executed tests.
It does not contain the test details by suite table, and it is also not 
possible to navigate from statistics by suite table to the log file.

.. figure:: summaryreport.png
   :width: 600
   :height: 450
   
   Example summary file

Debug file
''''''''''

Debugfile is a special kind of output file. It is a text file that is written
during the execution. It is possible to follow the execution of tests by 
following the information written in the debugfile. There is a tool__
available for viewing the debugfile. 

__ `Tool for viewing debug files (fileviewer.py)`_


Syslog
~~~~~~

Syslog file contains debug information about the functioning of Robot 
Framework. The information in it is usually only needed when some unexpected
error occurs during the execution of tests.

To enable syslog, environment variable ROBOT_SYSLOG_FILE must contain an 
absolute path to a non-existing file. The ROBOT_SYSLOG_LEVEL environment 
variable determines the level of logging. Available levels are same as with
`--loglevel`__ command line option.

__ `Setting log level`_


Setting output files
~~~~~~~~~~~~~~~~~~~~

Each output file has a corresponding command line option to determine a path 
to which it is written. These paths are relative to output directory, unless
given as absolute paths.

Setting output file
'''''''''''''''''''

Command line option :setting:`--output (-o)` determines where output file
is created. This file is created by default when test are executed with 
Robot Framework, but is not created with :prog:`rebot` unless this option
is used.

Setting log file
''''''''''''''''

Command line option :setting:`--log (-l)` determines where log file is
created. Log file is created by default both when test are executed and
when :prog:`rebot` is used. The default name for log file is log.html.
Creation of log file may be disabled by using argument 'none'.


Setting report file
'''''''''''''''''''

Command line option :setting:`--report (-r)` determines where report file 
is created. Report file is created by default both when test are executed and
when :prog:`rebot` is used. The default name for log file is report.html.
Creation of log file may be disabled by using argument 'none'.

Setting summary report file
'''''''''''''''''''''''''''

Command line option :setting:`--summary (-S)` determines where summary report 
file is created. By default this file is not created. 

Setting output directory
''''''''''''''''''''''''

By default, output directory is the directory where test execution was started.
This can be changed with option :setting:`--outputdir (-d)`. If the given 
directory does not exist, it will be created. 

Setting timestamps to output file names
'''''''''''''''''''''''''''''''''''''''

It is also possible to get timestamped names for output files by using command
line option :setting:`--timestampoutputs`. The timestamp is of format 
'YYMMDD-hhmmss' and will be placed between the basename and extension of each
output file name.

Example::
    
    "pybot -T --log mylog.html tests" generates files called output-080604-163225.xml and mylog-080604-163225.html



Splitting outputs
~~~~~~~~~~~~~~~~~

For big test suites, instead of generating one huge output file, Robot 
Framework can be configured to produce a set of smaller output files. In this
case, if log files are created, one log file will be created from each 
output file. If report file is generated, it will still be only one file, 
but it links to multiple log files.

Splitting can be turned on with command line option :setting:`--splitoutputs`,
which takes split level as its argument. 

When outputs are split, a top-level output file contains the general 
information about the whole test execution and it links to sub-level output 
files which contain details of some suites and tests. The exact contents of 
each file depends on split level and the directory structure of the test data
As the examples below demonstrate, the test data should be strucutred in a 
way that supports splitting outputs should you wish to use that feature.


Unbalanced output
'''''''''''''''''

When an unbalanced directory strucuture (see Figure) is executed with split
level set to 3, individual output file is created for test case files 1-4.
The information about the test case files 5 and 6 will be written to root 
level output file. So in this case, following files will be created:

- output.xml, which contains summary information of the executed suite, 
  details of test case files 5 and 6, and liks to sub-level output files.
    
- output-001.xml output-002.xml, output-003.xml and output-004.xml, which
  contain details of test case files 1, 2, 3 and 4, respectively.


.. figure:: unbalanced_output.png
   :width: 629
   :height: 278

   Example unbalanced output file

Balanced output
'''''''''''''''

When an balanced directory strucuture (see Figure) is executed with split
level set to 3, individual output file is created for all test case files.
So in this case, following files will be created:

- output.xml, which contains summary information of the executed suite 
  and links to sublevel output files.
    
- output-001.xml output-002.xml, output-003.xml and output-004.xml, 
  output-005.xml output-006.xml, output-007.xml and output-008.xml, which
  contain details of test case files 1-8.


.. figure:: balanced_output.png
   :width: 597
   :height: 266

   Example balanced output file


Setting titles 
~~~~~~~~~~~~~~

Titles for `Log`_, `Report`_ and `Summary report`_ files can be given from command 
line using options :setting:`--logtitle`, :settingi:`--reporttitle` and :setting:
`--summarytitle` respectively. The default title is generated from the name(s) of 
the input file(s).


Configuring statistics
~~~~~~~~~~~~~~~~~~~~~~

--tagstatinclude
--tagstatexclude
--tagstatcombine
--tagstatlink
--tagdoc
--suitestatlevel

Setting log level
~~~~~~~~~~~~~~~~~

By default, `keyword output`__ from test libraries is logged at :msg:`INFO` 
level. This can be changed from the command line using :setting:`--loglevel (-L)`. 
The available log levels in descending order are :msg:`WARN`, :msg:`INFO`, 
:msg:`DEBUG` and :msg:`TRACE`. When a certain log level is used, Everything with 
lesser log level is ignored when output file is written, and thus that information 
is not available when log files are generated. 

__ `Logging information`_

.. note::
   With log level :msg:`TRACE`, Robot Framework itself logs the actual values
   of keyword arguments and return values. Normally, only variable names are 
   logged. This may increase the size of the output file(s) considerably.


Removing keywords from outputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When outputs are processed with :prog:`rebot`, it is possible to remove all
keyword information of passed tests from the produced log file(s) using command
line option :setting:`--removekeywords`. Only the names of top-level keywords 
will be listed. This may reduce the size of the log file(s) dramatically, while 
still preserving essential information about failed tests.

