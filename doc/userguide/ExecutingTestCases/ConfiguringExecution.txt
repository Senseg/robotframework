Configuring execution
----------------------

.. contents::
   :depth: 2
   :local:

Selecting test cases
~~~~~~~~~~~~~~~~~~~~

Robot Framework offers several command line options for selecting which test
cases to include in a given test execution. The options can also be combined for  
even greater flexibility.


By names
''''''''

Test suites and test cases can be included in the test run by their names,
with command line options :setting:`--suite (-s)` and :setting:`--test (-t)`. 
Both of these can be defined multiple times, and their arguments may contain 
simple patters. It is also possible to determine parent suite with 
:setting:`--suite` by using the option like :cli:`--suite parentname.childname`. 
In this case also the setup and teardown of the parent suite are executed if 
they are defined. Exmaples::

  pybot --test test-? --t some_name
  pybot --suite mys* -s alltests.subsuite 

These options are usually useful during development of new test cases. It is
often necessary to execute some hierarchy of test suites to get proper setup
and teardown executed, but then actually only run the tests that are being 
developed.


By tag names
''''''''''''

It is possible to include and exclude test cases by tag names with specific
command line options. Both these options can be defined multiple times, and
their arguments may contain simple patterns.

:setting:`--include (-i)` can be used to include test cases in the test execution 
by tag names and :setting:`--exclude (-e)` to exclude tests. If a tag matches 
both include and exclude, it is not executed. Examples::

  pybot --include tag1
  pybot -i criticalANDowner-*
  pybot --include feature1 --exclude notready 

These options are usually useful in an automated environment. For example,
unfinished tests may be committed to version control but marked with tag
'notready' or similar, and be excluded from the test execution. Similarly,
some subset of tests could be tagged 'smoke' and first only those tests
would be executed.


Setting criticality
~~~~~~~~~~~~~~~~~~~

The final result of test execution is determined based on critical tests. If
any critical test fails, the whole run is considered failed. Command line 
options :setting:`--critical (-c)` and :setting:`--noncritical (-n)` can be used 
to control which tags are considered critial. Both of these options can be
given multiple times and their arguments may be simple patters. If a tag 
matcehs bot critical and non-critical, it is considered non-critical.
Examples::

  pybot --critical smoke 
  pybot --noncritical not-ready


Setting metadata
~~~~~~~~~~~~~~~~

Name
''''

When Robot Framework parses test data, a name for the top-level suite is given
based on the data source path. This can be overridden with command line option
:setting:`--name (-N)`. The argument is capitalized and underscores are 
converted to spaces.

Documentation
'''''''''''''

In addition to defining documentation in the test data, documentation for the
top-level suite may also be given from the command line with option 
:setting:`--doc (-D)`. Given documenatation may contain simple HTML formatting.

Free metadata
'''''''''''''

`Free test suite metadata`_ may also be given from commandline with option
:setting:`--metadata (-M)`. The argument must be in format name:value, where
name is capitalized and undescores are converted to spaces and value may 
contain simple HTML formatting. This option may be used multiple times.

Tags
''''

Command line option :setting:`--settag (-G)` can be used to set given tag to 
all exsecuted test cases. This option may be used multiple times.

Adjusting library search path
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When test libraries are taken into use in the test data, Robot Framework tries
to find the library code from locations defined in PYTHONPATH environment
variable. When test are executed with Jython, also CLASSPATH environment 
variable is used to determine search path. Command line option 
:setting:`--pythonpath` can be used to add directories to PYTHONPATH environment 
variable. 

It is usually best to create a start-up script for setting the environment
variables.

Setting variables
~~~~~~~~~~~~~~~~~

There is also possibility to define variable_ from command line, either
directly or from a variable file. These variables will override any 
variables with same name in test case and resource files. 

Option :setting:`--variable (-v)` takes an argument in the format name:value.
'name' must be given without '${}'. This option can only be used to create
scalar variables. Examples::

  --variable str:Hello  =>  ${str} = 'Hello'
  -v str:Hi_World -E space:_  =>  ${str} = 'Hi World'
  -v x: -v y:42  =>  ${x} = '', ${y} = '42'

Option :setting:`--variablefile (-V)` can be used to take a `variable file`__
into use.

__ `Variable files`

Setting runmode
~~~~~~~~~~~~~~~

There is a command line option :setting:`--runmode`, which can be used to define
some additional characteristics of the test execution. It currently has four
meaningful values, all other values are just ignored. The possible values are:

random:test
    Tests inside each suite are executed in random order.

random:suite
    All suites are executed in random order.

random:all
    Suites are executed in random order and tests inside suites are also 
    executed in random order.

exitonfailure
    Test execution is stopped whenever a critical test fails. All remaining
    test will be marked failed with message 
    'Critical failure occurred and ExitOnFailure option is in use'


Controlling monitor output
~~~~~~~~~~~~~~~~~~~~~~~~~~

Width of the console output can be defined using option :setting:`-- monitorwidth`,
the default value for monitor width is 78.

:setting:`--monitorcolors` is used to control whether colors should be used
in the monitor output or not. It has three possible values, and 'on' is the
default value:

on
    colors are used in unixes but no in Windows

off
    colors are never used

force
    colors are always used


Setting listeners
~~~~~~~~~~~~~~~~~

The only way to get a listener__ into use during execution is to define it 
from command line using option :setting:`--listener`. The listener class 
must be found in PYTHONPATH__.

__ `Using the listener interface`_
__ `Adjusting library search path`_


Setting times for combined outputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When combining outputs with rebot it possible to set the start and end
time of the combined suite using option :setting:`--starttime` and 
:setting:`--endtime`. This may be convenient because by default,
these statistics will have no value in the combined suite.




