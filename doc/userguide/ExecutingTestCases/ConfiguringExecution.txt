Configuring execution
----------------------

.. contents::
   :depth: 2
   :local:

Selecting test cases
~~~~~~~~~~~~~~~~~~~~

Robot Framework offers several command line options for selecting which test
cases to include in a given test execution. The options can also be combined for  
even greater flexibility.


By names
''''''''

Test suites and test cases can be included in the test run by their
names, with the command line options :setting:`--suite (-s)` and
:setting:`--test (-t)`.  Both of these can be defined multiple times
and their arguments may contain simple patterns. It is also possible to
determine a parent suite with :setting:`--suite` by using the option
as in :cli:`--suite parentname.childname`.  In this case, also the
setup and teardown of the parent suite are executed, if they are
defined. Examples::

  pybot --test test-? --t some_name
  pybot --suite mys* -s alltests.subsuite 

Usually, these options are useful during the development of new test
cases. It is often necessary to execute some hierarchy of test suites
to get proper setup and teardown executed, but then only run the tests
that are being developed.


By tag names
''''''''''''

It is possible to include and exclude test cases by tag names with
specific command line options. Both these options can be defined
several times, and their arguments may contain simple patterns.

:setting:`--include (-i)` can be used to include test cases in the test execution 
by tag names and :setting:`--exclude (-e)` to exclude tests. If a tag matches 
both include and exclude, it is not executed. Examples::

  pybot --include tag1
  pybot -i criticalANDowner-*
  pybot --include feature1 --exclude notready 

Usually, these options are useful in an automated environment. For example,
unfinished tests may be committed to version control, marked with a tag
"notready" or similar, and excluded from the test execution. Similarly,
a subset of tests can be tagged "smoke" and first only those tests
would be executed.


Setting criticality
~~~~~~~~~~~~~~~~~~~

The final result of test execution is determined on the basis of critical tests. If
a critical test fails, the whole run is considered failed. The command line 
options :setting:`--critical (-c)` and :setting:`--noncritical (-n)` can be used 
to control which tags are considered critial. Both of these options can be
given several times and their arguments may be simple patterns. If a tag 
matches both critical and non-critical, it is considered non-critical.
Examples::

  pybot --critical smoke 
  pybot --noncritical not-ready


Setting metadata
~~~~~~~~~~~~~~~~

Setting name
''''''''''''

When Robot Framework parses test data, a name for the top-level suite
is based on the data source path. This can be overridden with the
command line option :setting:`--name (-N)`. The argument is
capitalized and underscores are converted to spaces.

Setting documentation
'''''''''''''''''''''

In addition to defining documentation in the test data, documentation
for the top-level suite may also be given from the command line with the
option :setting:`--doc (-D)`. The given documenatation may contain simple
HTML formatting.

Setting free metadata
'''''''''''''''''''''

`Free test suite metadata`_ may also be given from the command line with the option
:setting:`--metadata (-M)`. The argument must be in the format :setting:`name:value`, where
"name" is capitalized and undescores converted to spaces and "value" may 
contain simple HTML formatting. This option may be used several times.

Setting tags
''''''''''''

The command line option :setting:`--settag (-G)` can be used to set the given tag to 
all executed test cases. This option may be used several times.

Adjusting the library search path
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When test libraries are introduced in the test data, Robot Framework
attempts to find the library code from locations defined in the
PYTHONPATH environment variable. When tests are executed with Jython,
also the CLASSPATH environment variable is used to determine the
search path. The command line option :setting:`--pythonpath` can be
used to add directories to the PYTHONPATH environment variable.

It is usually best to create a start-up script for setting the environment
variables.

Setting variables
~~~~~~~~~~~~~~~~~

You can also define a variable_ from the command line, either
directly or from a variable file. These variables override any 
variables with same name in test case and resource files. 

The option :setting:`--variable (-v)` takes an argument in the format
:setting:`name:value`, where "name" must be given without "${}". This
option can only be used to create scalar variables. Examples::

  --variable str:Hello  =>  ${str} = 'Hello'
  -v str:Hi_World -E space:_  =>  ${str} = 'Hi World'
  -v x: -v y:42  =>  ${x} = '', ${y} = '42'

The option :setting:`--variablefile (-V)` can be used to take a `variable file`__
into use. Argument for this option is either relative or absolute path to the file.

__ `Variable files`

Setting runmode
~~~~~~~~~~~~~~~

There is a command line option :setting:`--runmode`, which can be used to define
some additional characteristics of the test execution. Currently it has four
meaningful values, all other values are just ignored. The possible values are:

:setting:`random:test`
    Tests inside each suite are executed in random order.

:setting:`random:suite`
    All suites are executed in random order.

:setting:`random:all`
    Suites are executed in random order, tests inside suites likewise.

:setting:`exitonfailure`
    Test execution is stopped whenever a critical test fails. All remaining
    test will be marked failed with the message 
    :msg:`Critical failure occurred and ExitOnFailure option is in use`.


Controlling monitor output
~~~~~~~~~~~~~~~~~~~~~~~~~~

The width of the console output can be defined using the option :setting:`-- monitorwidth`.
The default value for the monitor width is 78.

:setting:`--monitorcolors` is used to control whether colors should be used
in the monitor output. It has three possible values, of which :setting:`on` is the
default value:

:setting:`on`
    Colors are used in UNIX-like systems, but not on Windows.

:setting:`off`
    Colors are never used.

:setting:`force`
    Colors are always used.


Setting listeners
~~~~~~~~~~~~~~~~~

The only way to use a listener__ during execution is to define it from
the command line using the option :setting:`--listener`. The listener
class must be found in PYTHONPATH__.

__ `Using the listener interface`_
__ `Adjusting the library search path`_


Setting times for combined outputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When combining outputs with rebot, it possible to set the start and end
time of the combined suite using the option :setting:`--starttime` and 
:setting:`--endtime`. This may be convenient, because by default,
these statistics have no value in the combined suite.




