Using internal APIs
-------------------

Robot Framework has some public APIs which are intended to help in developing 
supporting tools or extending the processing of input or output data. These
APIs are implemented as Python modules, and as such can only be used from 
Python and Jython scripts and programs. 

Unfortunately, these APIs are not particularly well documented, and
are subject to change and refinement in the future. The plan is to
enhance the documentation in the future, but before that the optios to get
more information are asking help from Robot Framework developers,
investigating existing `supporting tools`_ that use these APIs, or
just taking a look at the source code of Robot Framework.

.. contents:: 
   :depth: 2
   :local: 


Executed test data
~~~~~~~~~~~~~~~~~~

This API consists of a method for reading Robot Framework output file(s) into a
:code:`TestSuite` object that contains all the relevant information about the 
results of the test execution. Signature of method is :code:`TestSuite(outpath)`, 
where :code:`outpath` is a path to an existing output file. The returned 
:code:`TestSuite` object can be used to process the results of the test run. 

Here is an example that reads a given output file and marks each test case whose 
execution time is longer than three minutes failed. The :code:`TestSuite` object 
is then serialized and normal log and report files could be generated with 
:prog:rebot_.

.. sourcecode:: python 
   
   src/ExtendingRobotFramework/check_test_times.py


Test execution
~~~~~~~~~~~~~~

This API consists of :code:`run` method, which can be used for starting the 
test execution. Signature of the method is :code:`run(*datasources, **options)`, 
where :code:`datasources` are paths to files and directories to be executed and
:code:`options` are same as normal `command line options`_ without hyphens.

Example:

.. sourcecode:: python

    from robot import run

    run('tests.html', log='mylog.html', include=['tag1', 'tag2'])


Equivalent command line usage would be::

   pybot --log mylog.html --include tag1 --include tag2 tests.html


.. warning:: This method can be used only once in a given context. 
             This problem will be fixed in future releases.


Parsed test data
~~~~~~~~~~~~~~~~

This API consists of a method for getting a :code:`TestSuite` object that 
contains parsed test data. The method is used like :code:`TestSuite(*datasources,
**options)`, where :code:`datasources` are paths to files and directories 
containing the test data, and :code:`options` are same as normal `command line 
options`_ without hyphens.

Example:

.. sourcecode:: python

    from robot.parsing import TestSuite
    
    suite = TestSuite('path/to/tests.html', process_curdir=False)
    print suite.name
    for test in suite.tests:
        print test.name

:code:`process_curdir` is a special option, and when False, the variable 
:var:`${CURDIR}` is not replaced when parsing the data. `Robot IDE`_ uses this 
option when it parses the input data. See `Built-in variables`_ for more 
information about :var:`${CURDIR}`. 


Runnable test data
~~~~~~~~~~~~~~~~~~

This API consists of a  method for parsing given input files into a runnable 
:code:`TestSuite` object. This differs from a parsed :code:`TestSuite` in that
variables and settings for suite(s) are processed.

The signature of this :code:`TestSuite` method is :code:`TestSuite(datasources, 
settings, syslog)` , where data sources are paths to files and directories, 
similarly as when running pybot/jybot from the command line. 

