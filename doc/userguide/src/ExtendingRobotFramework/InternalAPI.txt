Using internal APIs
-------------------

Robot Framework has some public APIs which are intended to help in developing 
supporting tools or extending the processing of input or output data. These
APIs are implemented as Python modules, and as such can only be used from 
Python and Jython scripts and programs. 

Unfortunately, these APIs are not particularly well documented, and are subject
to change and refinement in the future. Our goal is to improve the APIs and
the documentation in the future releases is based on needs and requests. If you
have questions regarding the APIs, please contact Robot Framework developers.

Some of the tools included with Robot Framework illustrate the use of these
APIs.


.. contents:: 
   :depth: 2
   :local: 


Test execution
~~~~~~~~~~~~~~

The Robot Framework runner method. It is possible to start the execution
of Robot tests by calling this method instead of using the command line
interface.

The signature of run method is :code:`run(*datasources, **options)`, where
"datasources" are paths to files and directories, similarly as when running
pybot/jybot from the command line. "Options" are given as keywords' arguments and
their names are the same as the long command line options without hyphens.

Example:

.. sourcecode:: python

    from robot import run

    run('/path/to/tests.html', '/path/to/tests2.html', log='mylog.html')

Equivalent command line usage would be:
:cli:`pybot --log mylog.html /path/to/tests.html /path/to/tests2.html`

.. warning:: This method can be used only once in a given context. This issue will
    fixed in a future release.


Parsed test data
~~~~~~~~~~~~~~~~

A method for parsing given input files into a test suite object, which 
contains the data from the input files "as is".

The signature of this :code:`TestSuite` method is 
:code:`TestSuite(*datasources, **options)`, where "datasources" are paths to 
files and directories, similarly as when running pybot/jybot from the command 
line. "Options" are given as keywords arguments and their names are the same as 
the long command line options without hyphens. 

Example:

.. sourcecode:: python

    from robot.parsing import TestSuite
    
    suite = TestSuite('path/to/tests.html', process_curdir=False)
    print suite.name
    for test in suite.tests:
        print test.name

The options that affect parsing are as follows:

process_curdir 
    is a special option, and when False, the variable :var:`${CURDIR}` is not 
    replaced when parsing the data. `Robot IDE`_ uses this option when it 
    parses the input data. See `Built-in variables`_ for more information about 
    :var:`${CURDIR}`. 

syslog_
   
SuiteNames
   The value of this option becomes the name of the topmost suite, if either
   several datasources are given or if the datasource is a directory.


Runnable test data
~~~~~~~~~~~~~~~~~~

A method for parsing given input files into a runnable test suite object. 
This means that variables and settings for suite are processed.

The signature of this :code:`TestSuite` method is 
:code:`TestSuite(datasources, settings, syslog)`, where data sources are 
paths to files and directories, similarly as when running pybot/jybot from 
the command line. "Settings" must be a RobotSettings object, and "syslog" must 
implement the syslog interface.


Executed test data
~~~~~~~~~~~~~~~~~~

A method for reading a Robot Framework output file(s) into a test suite 
object that contains all the relevant information about the results of
the test execution. 

The signature of this :code:`TestSuite` method is :code:`TestSuite(outpath)`, 
where "outpath" is a path to an existing output file. The returned 
:code:`TestSuite` object can be used to process the results of the test run. 

Here is an example that reads a given output file and marks each test case, 
the execution time of which is longer than 3 minutes, failed. The :code:`TestSuite` 
object is then serialized and regular Robot log and report files can 
be generated with Rebot_.

.. sourcecode:: python 
   
   ExtendingRobotFramework/check_test_times.py

