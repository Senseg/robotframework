Test data clean-up tool (:prog:`tidy`)
--------------------------------------

:prog:`tidy` is a tool for cleaning up and changing the format of Robot
Framework test data files. It is built-in into Robot Framework and
automatically included in the installation starting from version 2.7.

By default, the output of the tool is written into the standard output
stream, but it can also be redirected to a file. Alternatively, files can be
modified in-place using :opt:`--inplace` or :opt:`--recursive` options.

Synopsis
~~~~~~~~

::

    python -m robot.tidy [options] inputfile
    python -m robot.tidy [options] inputfile > outputfile
    python -m robot.tidy --inplace [options] inputfile [more input files]
    python -m robot.tidy --recursive [options] directory

Options
~~~~~~~

 -i, --inplace    Tidy given file(s) so that original file(s) are overwritten
                  (or removed, if the format is changed). When this option is
                  used, it is possible to give multiple input files. Examples::

                      python -m robot.tidy --inplace tests.html
                      python -m robot.tidy --inplace --format txt *.html

 -r, --recursive  Process given directory recursively. Files in the directory
                  are processed in place similarly as when :opt:`--inplace`
                  option is used.
 -f, --format <txt|html|tsv>
                  Output file format. If omitted, the format of the input
                  file is used.
 -p, --use-pipes  Use a pipe character (|) as a cell separator in the txt format.
 -h, --help       Show this help.

Cleaning up the test data
~~~~~~~~~~~~~~~~~~~~~~~~~

Test case files created with HTML editors or written by hand can be normalized
using tidy. :prog:`tidy` always writes consistent headers, consistent order for
settings, and consistent amount of whitespace between cells and tables.

Examples::

    python -m robot.tidy messed_up_tests.html > cleaned_tests.html
    python -m robot.tidy --inplace tests.txt

Changing the test data format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Robot Framework supports test data in HTML, TSV and TXT formats and :prog:`tidy`
makes changing between the formats trivial. Input format is always determined
based on the extension of the input file. Output format can be set using
the :opt:`--format` option.

Examples::

    python -m robot.tidy --format tsv tests_in_html.html > tests_in_tsv.tsv
    python -m robot.tidy --format txt --recursive mytests

Output encoding
~~~~~~~~~~~~~~~

All output files are written using UTF-8 encoding. Outputs written to the
console use the current console encoding.

Alternative execution
~~~~~~~~~~~~~~~~~~~~~

:prog:`tidy` is used only with Python in the synopsis and examples above,
but it works also with Jython and IronPython.

In addition to executing :prog:`tidy` as a module (:cli:`python -m robot.tidy`),
it is possible to execute it as a script::

    python path/robot/tidy.py [options] inputfile

This is useful if you have done a `manual installation`_ of the framework
and just have the :path:`robot` directory with the source code somewhere
in your system.
