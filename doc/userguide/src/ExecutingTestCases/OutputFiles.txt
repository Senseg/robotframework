Created outputs
---------------

Several output files are created when tests are executed, and most of
them are somehow related to test results. This section discusses what
outputs are created, how to configure where they are created, and how
to fine-tune their contents.

.. contents::
   :depth: 2
   :local:


Different output files
~~~~~~~~~~~~~~~~~~~~~~

This section explains what different output files can be created and
how to configure where they are created. Output files are configured
using command line options, which get the path to the output file in
question as an argument. A special value :setting:`NONE`
(case-insensitive) can be used to disable creating a certain output
file.


Output directory
''''''''''''''''

All output files can be set using an absolute path, in which case they
are created to the specified place, but in other cases, the path is
considered relative to the output directory. The default output
directory is the directory where the execution is started from, but it
can be altered with the :setting:`--outputdir (-d)` option. The path
set with this option is, again, relative to the execution directory,
but can naturally be given also as an absoute path. Regardless of how
a path to an individual output file is obtained, its parent directory
is created automatically, if it does not exist already.


Output file
'''''''''''

Output files contain all the test execution results in the XML
format. Log_, report_, and summary_ files are generated based on
output files, and output files can also be `combined and otherwise
post-processed`__ after the test execution.

The command line option :setting:`--output (-o)` determines where
output files are created. Output files are always created when tests
are executed, and the default name for them is
:path:`output.xml`. When post-processing outputs, new output files are
not created unless this option is explicitly used.

__ `Post-processing outputs`_


Log file
''''''''

Log files contain details about the executed test cases in HTML
format. They have a hierarchical structure showing test suite, test
case and keyword details. Log files are needed nearly every time when
test results are to be investigated in detail. Even though log files
also have statistics, report_ and summary_ files are better for
getting an higher-level overview.

The command line option :setting:`--log (-l)` determines where log
files are created. Unless the special value :setting:`NONE` is used,
log files are always created and their default name is
:path:`log.html`.

.. figure:: log.png
   :width: 500
   :height: 534

   An example log file


Report file
'''''''''''

Report files contain an overview of the test execution results in HTML
format. They have statistics based on tags and executed test suites,
as well as a list of all executed test cases. When both reports and
logs are generated, the report has links to the log file for easy
navigation to more detailed information.  It is easy to see the
overall test execution status from reports, because their background
color is green, if all `critical tests`_ pass, and bright red
otherwise.

The command line option :setting:`--report (-r)` determines where
report files are created. Similarly as log files, reports are always
created unless :setting:`NONE` is used as a value, and their default
name is :path:`report.html`.

.. figure:: report.png
   :width: 600
   :height: 568

   An example report file


Summary file
''''''''''''

Summary files contain the same statistics as reports, and their
background color is similarly green or red, depending on the overall
test execution status. However, they have no test case details, which
makes them much smaller. They are useful when a large number of test
cases is executed and a very high-level overview is needed.

Summary files are not generated by default. When they are needed, they
can be created using the command line option :setting:`--summary
(-S)`.

.. figure:: summary.png
   :width: 600
   :height: 450
   
   An example summary file


Debug file
''''''''''

Debug files are plain text files that are written during the test
execution. All messages got from test libraries are written to them,
as wel as information about started and ended test suites, test cases
and keywords. Debug files can be used for monitoring the test
execution. This can be done using, for example, a separate `file
viewer tool`__, or in UNIX-like systems, simply with the :prog:`tail
-f` command.

__ `File viewing tool -- fileviewer.py`_

Debug files are not created unless the command line option
:setting:`--debugfile (-b)` is used explicitly.


Timestamping output files
'''''''''''''''''''''''''

All output files listed in this section can be automatically
timestamped with the option :setting:`--timestampoutputs (-T)`, which
is one of the rare opions taking no value. When this option is used, a
timestamp in the format :setting:`YYYYMMDD-hhmmss` is placed between
the extension and the basename of each file. The example below would,
for example, create such output files as
:path:`output-20080604-163225.xml` and
:path:`mylog-20080604-163225.html`.

::

   pybot --timestampoutputs --log mylog.html --report NONE tests.html


Setting titles
''''''''''''''

The default titles for log_, report_ and summary_ files are generated
by prefixing the name of the top-level test suite with :name:`Test
Log`, :name:`Test Report` or :name:`Summary Report`. Custom titles can
be given from the command line using the options
:setting:`--logtitle`, :setting:`--reporttitle` and
:setting:`--summarytitle`, respectively. With all these options,
underscores in the given title are converted to spaces automatically.

Examples::

   pybot --logtitle Smoke_Test_Log --reporttitle Smoke_Test_Report --include smoke mytests
   rebot --summarytitle Overview --summary overview.html --log none --report none *.xml


Log levels
~~~~~~~~~~

Available log levels
''''''''''''''''''''

Messages in `log files`_ can have different log levels. Some of the
messages are written by Robot Framework itself, but also executed
keywords can `log information`__ using different levels. The available
log levels are:

__ `Logging information`_

:msg:`FAIL`
   Used when a keyword fails. Can be used only by Robot Framework.

:msg:`WARN`
   Used to display warnings. Note that warnings do not change the
   test case status, so they can easily be missed.
 
:msg:`INFO` 
   The default level for normal messages. By default,
   messages below this level are not shown in the log file.

:msg:`DEBUG`
   Used for debugging purposes. Useful for example for logging what
   libraries are doing internally.

:msg:`TRACE`
   Another debugging level. Robot Framework itself logs the actual values
   of keyword arguments and the return values using this level.


Setting log level
'''''''''''''''''

By default, log messages below :msg:`INFO` are not logged, but this
threshold level can be changed from the command line using the
:setting:`--loglevel (-L)` option. This option takes any of the
available log levels as an argument, and that level becomes the new
threshold level. A special value :msg:`NONE` can also be used to
disable logging altogether.

Another possibility to change the log level is using the `BuiltIn
keyword`_ :kw:`Set Log Level` in the test data. It takes the same
arguments as the :setting:`--loglevel` option, and it also returns the
old level so that it can be restored later, for example, in a `test
teardown`_.


Splitting outputs
~~~~~~~~~~~~~~~~~

When executing a large number of test cases, the size of log files can
increase to the extent that opening them in the browser is slow. A
solution for this problem is splitting the log file into smaller
pieces so that the top-level log acts as an index having links to
other pieces.

Splitting can be activated with the command line option
:setting:`--splitoutputs`, which takes split level as its
argument. When it is used, both XML output files and log files are
split from the specified level, but only one report is always created.

*TODO: Continue here*


When outputs are split, a top-level output file contains the general 
information about the whole test execution and it links to sublevel output 
files, which contain details of some suites and tests. The exact contents of 
each file depends on the split level and the directory structure of the test data.
As the examples below show, the test data needs to be structured in a 
way that supports splitting outputs, if you wish to use that feature.


Unbalanced output
'''''''''''''''''

When an unbalanced directory structure (see the figure below) is executed with a split
level set to 3, an individual output file is created for test case files from 1 to 4.
The information about the test case files 5 and 6 is written to the root 
level output file. In this case, the following files will be created:

- :path:`output.xml`, which contains summary information of the executed suite, 
  details of test case files 5 and 6, and links to sublevel output files.
    
- :path:`output-001.xml`, :path:`output-002.xml`,
  :path:`output-003.xml` and :path:`output-004.xml`, which contain
  details of test case files 1, 2, 3 and 4, respectively.


.. figure:: unbalanced_output.png
   :width: 629
   :height: 278

   Example unbalanced output file

Balanced output
'''''''''''''''

When a balanced directory structure (see the figure below) is executed with a split
level set to 3, an individual output file is created for all test case files.
In this case, the following files will be created:

- :path:`output.xml`, which contains summary information on the executed test suite 
  and links to sublevel output files.
    
- :path:`output-001.xml`, :path:`output-002.xml`, :path:`output-003.xml`, :path:`output-004.xml`, 
  :path:`output-005.xml`, :path:`output-006.xml`, :path:`output-007.xml`, and :path:`output-008.xml`, which
  contain details of test case files from 1 to 8.


.. figure:: balanced_output.png
   :width: 597
   :height: 266

   Example balanced output file


Configuring statistics
~~~~~~~~~~~~~~~~~~~~~~

There are several command line options that can be used to configure
and tweak the contents of :name:`Statistics by Tag`, :name:`Statistics
by Suite` and :name:`Test Details by Tag` tables in different output
files. All these options work both when executing test cases and when
post-processing outputs.


Configuring displayed suite statistics
''''''''''''''''''''''''''''''''''''''

When a deeper suite structure is executed, showing all the test suite
levels in :name:`Statistics by Suite` table may make the table
somewhat messy. How many levels are displayed can be controlled with
the command line option :setting:`--suitestatlevel`. It takes the
required level as an integer, and if :setting:`0` is used, the whole
table is removed.


Including and excluding tag statistics
''''''''''''''''''''''''''''''''''''''

When plenty of tags are used, :name:`Statistics by Tag` table can get
quite crowded. If this happens, command line options
:setting:`--tagstatinclude` and :setting:`--tagstatexclude` can be
used to select what tags to display, similarly as
:setting:`--include` and :setting:`--exclude` are used to `select test
cases`__::

   --tagstatinclude some-tag --tagstatinclude another-tag
   --tagstatexclude owner-*
   --tagstatinclude prefix-* --tagstatexclude prefix-13

These settings affect also :name:`Test Details by Tag` table so that
it has details only by the selected tags. This can make the report
considerably smaller, and excluding not interesting tags is thus often a
good idea.

__ `By tag names`_


Generating combined tag statistics
''''''''''''''''''''''''''''''''''

The command line option :setting:`--tagstatcombine` can be used to
generate aggregate tags that combine statistics from multiple
tags. These new combined tags are shown in :name:`Statistics by Tag`
table, and matching tests listed in :name:`Test Details by Tag` table.
There are three somewhat different ways for giving arguments for this
option:

One tag as a `simple pattern`_
   All tags matching the given pattern are combined together.

Two or more tags separated by :code:`AND` or :code:`&`
   Combined statistics contains tests that have all the listed tags.
   Tags can be given as simple patterns.

Two or more tags separated by :code:`NOT`
   Combined statistics contains tests that have the first tag but
   not others.  Also in this case tags may be patterns.

Examples::

    --tagstatcombine owner-*
    --tagstatcombine tag-1ANDtag-2ANDtag-??
    --tagstatcombine smokeNOTiter-42

.. TODO: Screenshot needed! Preferably so that it shows results of the
         above example (which of course can be edited)


Creating links from tag names
'''''''''''''''''''''''''''''

It is possible to add external links to :name:`Statistics by Tag`
table by using the command line option
:setting:`--tagstatlink`. Arguments to this option are given in format
:setting:`tag:link:name`, where :setting:`tag` specifies tags to
assign the link to, :setting:`link` is the link to be created, and
:setting:`name` is the name to give to the link.

:setting:`tag` may be a single tag, but more commonly a `simple
pattern`_ where :code:`*` matches anything and :code:`?` matches any
single character. When :setting:`tag` is a pattern, the matches to
wildcards may be used in :setting:`link` with the syntax :code:`%N`,
where :code:`N` is the index of the match starting from 1.

Examples::

    --tagstatlink mytag:http://my.domain:Link
    --tagstatlink bug-*:http://tracker/id=%1:Bug_Tracker
    --tagstatlink owner-*:mailto:%1@domain?subject=Acceptance_tests:Send_Mail

.. TODO: Screenshot needed! Preferably so that it shows results of the
         above example (which of course can be edited)


Adding documentation to tags
''''''''''''''''''''''''''''

Tags can be given a documentation with the command line option
:setting:`--tagdoc`, which takes an argument in format
:setting:`tag:doc`. :setting:`tag` is the name of the tag to assign
the documentation to, and it can also be a `simple pattern`_ matching
multiple tags. :setting:`doc` is the assigned
documentation. Underscores in it are converted to spaces automatically,
and it can also contain `HTML formatting`_. The given documentation is
shown with matching tags in :name:`Test Details by Tag` table, and as
a tool tip for these tags in :name:`Statistics by Tag` table.

Examples::

    --tagdoc mytag:My_documentation
    --tagdoc regression:*See*_http://info.html
    --tagdoc owner-*:Original_author


Additional options for post-processing outputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

These options are available only when `post-processing outputs`_ with
:prog:`rebot`.


Setting times for combined outputs
''''''''''''''''''''''''''''''''''

When `combining outputs`_, it is possible to set the start and end
time of the combined test suite using the options
:setting:`--starttime` and :setting:`--endtime`, respectively. This is
convenient, because by default, combined suites do not have these
values. When both the start and end time are given, the elapsed time
is also calculated based on them. Otherwise the elapsed time is got by
adding the elapsed times of the child tests suites together.

Times must be given as timestamps in the format :code:`YYYY-MM-DD
hh:mm:ss.mil`, where all separators are optional and the parts from
milliseconds to hours can be omitted. For example, :code:`2008-06-11
17:59:20.495` is equivalent both to :code:`20080611-175920.495` and 
:code:`20080611175920495`, and also mere :code:`20080611` would work.

Examples::

   rebot --starttime 20080611-17:59:20.495 output1.xml output2.xml
   rebot --starttime 20080611-175920 --endtime 20080611-180242 *.xml


Removing keywords from outputs
''''''''''''''''''''''''''''''

Most of the content of `output files`_ is taken by keywords and
especially their log messages. When creating higher level reports, log
files are not necessarily needed at all and the space taken by
keywords and their messages is just wasted. In these situations
command line option :setting:`--removekeywords` can be used to get rid
of unnecessary keywords. It has two possible values:

:setting:`ALL`
   All keywords are unconditionally removed. 

:setting:`PASSED`
   Keywords are removed only from passed test cases. In most cases log
   files created after this contain enough information to investigate
   possible failures.

Removing keywords makes output files considerably smaller and thus
faster to process further. Even when keywords are removed, names,
arguments and statuses of top-level keywords are preverved, so it is
still possible to create log files and see the high-level structure of
each test case. 


System log
~~~~~~~~~~

Robot Framework has its own plain text system log where it writes
information about

   * processed and skipped test data files
   * imported test libraries, resource files and variable files
   * executed test suites and test cases
   * created outputs

Normally users should never need this information, but it can be
useful when investigating problems with test libraries or Robot Framework
itself. System log is not created by default, but it can be enabled
by setting an environment variable :setting:`ROBOT_SYSLOG_FILE` so
that it contains a path to the selected file.

System log has same `log levels`_ as normal log file, with an
exception that instead of :msg:`FAIL` it has :msg:`ERROR` level. The
treshold level to use can be altered using
:setting:`ROBOT_SYSLOG_LEVEL` environment variable.


.. sourcecode:: bash

   #!/bin/bash

   export ROBOT_SYSLOG_FILE=/tmp/syslog.txt
   export ROBOT_SYSLOG_LEVEL=DEBUG

   pybot --name Syslog_example path/to/tests

