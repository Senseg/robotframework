Created outputs
---------------

Several outputs files are created when tests are executed, and most of
them are somehow related to test results. This section discusses what
outputs are created, how to configure where to create them, and how to
fine-tune their contents.

.. contents::
   :depth: 2
   :local:


Different output files
~~~~~~~~~~~~~~~~~~~~~~

This section explains what different output files can be created and how
to configure where to create them. Output files are configured using
command line options, which get the path to the output file in
question as an argument. Special value :setting:`NONE`
(case-insensitive), can be used to disable creating certain output
file.


Output directory
''''''''''''''''

All output files can be set using an absolute path, in which case they
are created to the specified place, but in other cases the path is
considered relative to the output directory. The default output
directory is the directory where the execution is started from, but it
can be altered with :setting:`--outputdir (-d)` option. The path set
with this option is, again, relative to the execution directory, but
can naturally be given also as an absoute path. Regardless how a path
to an individual output file is got, its parent directory is created
automatically if it does not exist.


Output file
'''''''''''

Output files contain all the test execution results in XML
format. Log_, report_, and summary_ files are generated based on them,
and they can also be `combined and otherwise post-processed`__ after the
test execution. 

The command line option :setting:`--output (-o)` determines where
output files are created. Output files are always created when tests
are executed, the default name for them is :path:`output.xml`. When
post-processing outputs, new output files are not created unless this
option is explicitly used.

__ `Post-processing outputs`_


Log file
''''''''

Log files contain details about the executed test cases in HTML
format. They have a hierarchical structure showing test suite, test
case and keyword details. Log files are needed nearly every time when
test results must be investigated in detail. Even though log files
also have statistics, report_ and summary_ files are better for
getting an higher-level overview.

The command line option :setting:`--log (-l)` determines where log
files are created. Unless special value :setting:`NONE` is used, log
files are always created and their default name is :path:`log.html`.

.. figure:: log.png
   :width: 500
   :height: 534

   An example log file


Report file
'''''''''''

Report files contain an overview of the test execution results in HTML
format. They have statistic based on tags and executed test suites, as
well as a list of all executed test cases . When both reports and logs
are generated, the report has links to the log file for easy
navigation to more detailed information.  It is easy to see the
overall test execution status from reports, because their backgroud is
green if all `critical tests`_ pass, and bright red otherwise.

The command line option :setting:`--report (-r)` determines where
report files are created. Similarly as log files, reporst are always
created unless :setting:`NONE` is used as a value, and their default
name is :path:`report.html`.

.. figure:: report.png
   :width: 600
   :height: 568

   An example report file


Summary file
''''''''''''

Summary files contain same statistics as reports, and their
backgrounds are similarly green or red depending on the overall test
execution status. They have no test case details, however, which makes
them much smaller. They are usefull when a big number of test cases is
executed and a very high-level overview is needed.

Summary files are not generated by default. When they are needed, they
can be created using the command line option :setting:`--summary (-S)`.

.. figure:: summary.png
   :width: 600
   :height: 450
   
   An example summary file


Debug file
''''''''''

Debug files are plain text files that are written during the test
execution. All messages got from test libraries are written to them,
as wel as information about started and ended test suites, test cases
and keywords. Debug files can be used for monitoring the test
execution using, for example, a separate `file viewer tool`__ or in
UNIX-like systems simply with :prog:`tail -f` command.

__ `File viewing tool -- fileviewer.py`_

Debug files are not created unless the command line option
:setting:`--debugfile (-b)` is used explicitly.


Timestamping output files
'''''''''''''''''''''''''

All output files listed in this section can be automatically
timestampped with option :setting:`--timestampoutputs (-T)`, which is
one of the rare opions taking no value. When this option is used, a
timestamp in format :setting:`YYYYMMDD-hhmmss` is placed between the
extension and the basename of each file. The example below would, for
example, create output files like :path:`output-20080604-163225.xml`
and :path:`mylog-20080604-163225.html`.

::

   pybot --timestampoutputs --log mylog.html --report NONE tests.html


Setting titles
''''''''''''''

The default titles for log_, report_ and summary_ files are generated
by prefixing the name of the top-level test suite with :name:`Test
Log`, :name:`Test Report` or :name:`Summary Report`. Custom titles can
be given from the command line using options :setting:`--logtitle`,
:setting:`--reporttitle` and :setting:`--summarytitle`,
respectively. With all these options, underscores in the given title
are converted to spaces automatically.

Examples::

   pybot --logtitle Smoke_Test_Log --reporttitle Smoke_Test_Report --include smoke mytests
   rebot --summarytitle Overview --summary overview.html --log none --report none *.xml


Log levels
~~~~~~~~~~

Available log levels
''''''''''''''''''''

Messages in `log files`_ can have different log levels. Some of the
messages are written by Robot Framework itself, but also executed
keywords can `log information`__ using different levels. Available
log levels are:

__ `Logging information`_

:msg:`FAIL`
   Used when a keyword fails. Can be used only by Robot Framework.

:msg:`WARN`
   Used to display warnings. Notice that warnings do not change the
   test case status and they can thus easily be missed.
 
:msg:`INFO`
   The default level for normal messages. Messages below this level
   are not shown in the log file by default.

:msg:`DEBUG`
   Used for debugging purposes. Useful for example for logging what
   libraries are doing internally.

:msg:`TRACE`
   Another debugging level. Robot Framework itself logs the actual values
   of keyword arguments and return values using this level.


Setting log level
'''''''''''''''''

By default log messages below :msg:`INFO` are not logged, but this
threshold level can be changed from the command line using
:setting:`--loglevel (-L)` option. This option takes any of the
available log levels as an argument, and that level becomes the new
threshold level. A special value :msg:`NONE` can also be used to
disable logging altogether.

Another possibility to change the log level is using `BuiltIn
keyword`_ :kw:`Set Log Level` in the test data. It takes same
arguments as :setting:`--loglevel` option, and it also returns the old
level so that it can be restored later, for example, in a `test
teardown`_.  


Splitting outputs
~~~~~~~~~~~~~~~~~

.. TODO: Not reviewed yet

For large test suites, instead of generating one vast output file, Robot 
Framework can be configured to produce a set of smaller output files. In this
case, if log files are created, one log file will be created from each 
output file. If a report file is generated, it will still be only one file, 
but links to multiple log files.

Splitting can be activated with the command line option :setting:`--splitoutputs`,
which takes split level as its argument. 

When outputs are split, a top-level output file contains the general 
information about the whole test execution and it links to sublevel output 
files, which contain details of some suites and tests. The exact contents of 
each file depends on the split level and the directory structure of the test data.
As the examples below show, the test data needs to be structured in a 
way that supports splitting outputs, if you wish to use that feature.


Unbalanced output
'''''''''''''''''

When an unbalanced directory structure (see the figure below) is executed with a split
level set to 3, an individual output file is created for test case files from 1 to 4.
The information about the test case files 5 and 6 is written to the root 
level output file. In this case, the following files will be created:

- :path:`output.xml`, which contains summary information of the executed suite, 
  details of test case files 5 and 6, and links to sublevel output files.
    
- :path:`output-001.xml`, :path:`output-002.xml`,
  :path:`output-003.xml` and :path:`output-004.xml`, which contain
  details of test case files 1, 2, 3 and 4, respectively.


.. figure:: unbalanced_output.png
   :width: 629
   :height: 278

   Example unbalanced output file

Balanced output
'''''''''''''''

When a balanced directory structure (see the figure below) is executed with a split
level set to 3, an individual output file is created for all test case files.
In this case, the following files will be created:

- :path:`output.xml`, which contains summary information on the executed test suite 
  and links to sublevel output files.
    
- :path:`output-001.xml`, :path:`output-002.xml`, :path:`output-003.xml`, :path:`output-004.xml`, 
  :path:`output-005.xml`, :path:`output-006.xml`, :path:`output-007.xml`, and :path:`output-008.xml`, which
  contain details of test case files from 1 to 8.


.. figure:: balanced_output.png
   :width: 597
   :height: 266

   Example balanced output file


Configuring statistics
~~~~~~~~~~~~~~~~~~~~~~

There are several command line options that can be used to configure and tweak the 
contents of 'Statistics by Tag', 'Test Details by Tag' and 'Statistics by Suite'
-tables in outputs files. 

Including and excluding tag statistics
''''''''''''''''''''''''''''''''''''''

The command line options :setting:`--tagstatinclude` and :setting:`--tagstatexclude`
can be used to define the contents of the Statistics by Tag and Test Details
by Tag tables. Both of these options may be given several times and their 
arguments may be simple patterns. If a tag matches both include and exclude, it 
will be excluded. 


Generating combined tag statistics
''''''''''''''''''''''''''''''''''

The command line option :setting:`--tagstatcombine` can be used to generate an
aggregate row in the Statistics by Tag and Test Details by Tag tables.
There are three somewhat different ways for giving arguments for this option:

One tag as a pattern
    All tags matching the pattern are combined, for example
    :cli:`--tagstatcombine it-\*`.

Two or more tags separated by "AND" or "&"
    Also in this case tags may be patterns. Tests must have all these tags to
    be included in the combined statistics. 
    Example: :cli:`--tagstatcombine tag1&tag2ANDit-1?`

Two or more tags separated by "NOT"
    Also in this case tags may be patterns. Only tests matching the first tag, but 
    not any of the following tags, are included in the combined statistics.
    Example: :cli:`--tagstatcombine it-11NOTsmoke`

Creating links from tag names
'''''''''''''''''''''''''''''

It is possible to add an external link to the Statistics by Tag table by using 
the command line option :setting:`--tagstatlink`. An argument to this option is given 
in the format :code:`pattern:link:title`, where pattern may contain the characters "*" (matches
anything) and "?" (matches any character). The matches of wildcards may be used in the 
resulting link with the syntax :code:`%N`, where "N" is the index of the match starting from 1.
Examples::

    --tagstatlink mytag:http://my.domain:Link
    --tagstatlink bug-*:http://tracker/id=%1:Bug_Tracker

Adding documentation to tags
''''''''''''''''''''''''''''

Documentation for tags can be set with the command line option :setting:`--tagdoc`
The argument is in the format :code:`tag:doc`, where "tag" may be a simple pattern and "doc" may
contain simple formatting. This documentation is shown in the 
Test Details by Tag table and also as a tool tip in the Statistics by Tag table.
Examples::

    --tagdoc mytag:My_documentation
    --tagdoc regression:*See*_http://info.html
    --tagdoc owner-*:Original_author


Configuring the Statistics by Suite table
'''''''''''''''''''''''''''''''''''''''''

You can control how many levels of subsuites are displayed in the 
Statistics by Suite table. This is done with the command line option
:setting:`--suitestatlevel`. If 0 is given as an argument, the whole table is 
removed.



Setting times for combined outputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When `combining outputs`_ with :prog:`rebot`, it is possible to set the
start and end time of the combined test suite using the options
:setting:`--starttime` and :setting:`--endtime`, respectively. This
may be convenient, because by default, the combined suite does not
have these values. When both the start and end time are given, the
elapsed time is also calculated based on them. Otherwise the elapsed
time is got by adding the elapsed times of the child tests suites together.

Times must be given as timestamps in the format :code:`YYYY-MM-DD
hh:mm:ss.mil`, where all separators are optional and the parts from
milliseconds to hours can be omitted. For example, :code:`2008-06-11
17:59:20.495` is equivalent both to :code:`20080611-175920.495` and 
:code:`20080611175920495`, and also mere :code:`20080611` would work.

Examples::

   rebot --starttime 20080611-17:59:20.495 output1.xml output2.xml
   rebot --starttime 20080611-175920 --endtime 20080611-180242 *.xml


Removing keywords from outputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When outputs are processed with :prog:`rebot`, you can remove all
keyword information of passed tests from the produced log file(s)
using the command line option :setting:`--removekeywords`. Only the
names of top-level keywords will be listed. This may reduce the size
of the log file(s) dramatically, while still preserving the essential
information about failed tests.


System log
~~~~~~~~~~

Syslog files contains debug information about the functioning of Robot 
Framework. The information in it is usually only needed when some unexpected
error occurs during the execution of tests.

To enable syslog, the environment variable :var:`ROBOT_SYSLOG_FILE` must contain an 
absolute path to a non-existing file. The :var:`ROBOT_SYSLOG_LEVEL` environment 
variable determines the level of logging. The available levels are the same as with the
`--loglevel`_ command line option.


