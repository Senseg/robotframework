Basic usage
-----------

Robot Framework test cases are executed from the command line, and the
end result is, by default, an output file in the XML format and an HTML
report and log. After the execution, output files can be combined and
otherwise post-processed with the :prog:`rebot` tool.

.. contents::
   :depth: 2
   :local:


Starting test execution
~~~~~~~~~~~~~~~~~~~~~~~

Different runner scripts
''''''''''''''''''''''''

Test execution is normally started with the :prog:`pybot` or
:prog:`jybot` commands. These commands are otherwise identical, but
the former executes tests using the Python interpreter and the latter uses
Jython. Which one to use depends on the needed test libraries. Some
libraries use modules or syntax available only on Python, others use
Java-based tools that require Jython, and some work on both. If you
can use either :prog:`pybot` or :prog:`jybot`, the former is
recommended, as Python is somewhat faster than Jython.

Another possibility for starting the test execution is running the
:prog:`runner.py` script under the installed__ :code:`robot` module
directly. This method allows selecting the interpreter and setting
command line options to it freely. The most common use case is
altering the options controlling `JVM maximum memory consumption`__.

__ `Where files are installed`_
__ `Modifying Java startup parameters`_

Regardless of the runner script, a path (or paths) to the test data to be
executed is given as an argument. Additionally, different command line
options can be used to alter the test execution or generated
outputs in some way.


Specifying test data to be executed
'''''''''''''''''''''''''''''''''''

Robot Framework test cases are created in files__ and directories__,
and they are executed by giving the path to the file or directory in
question to the selected runner script. The path can be absolute or,
more commonly, relative to the directory where tests are executed
from. The given file or directory creates the top-level test suite,
which gets its name, unless overridden with the :opt:`--name` option__,
from the `file or directory name`__. Different execution possibilities
are illustrated in the examples below. Note that in these examples, as
well as in other examples in this section, only the :prog:`pybot`
command is used, but :prog:`jybot` or a custom runner script
could be used similarly.

__ `Test case files`_
__ `Test suite directories`_
__ `Setting the name`_
__ `Test suite name and documentation`_

::

   pybot test_cases.html
   pybot path/to/my_tests/
   pybot /opt/robot/tests.html   
   pybot c:\robot\tests.html
   
It is also possible to give paths to several test case files or
directories at once, separated with spaces. In this case, Robot
Framework creates the top-level test suite automatically, and
the specified files and directories become its child test suites. The name
of the created test suite is got from child suite names by
catenating them together with an ampersand (&) and spaces. For example,
the name of the top-level suite in the first example below is
:name:`My Tests & Your Tests`. These automatically created names are
seldom very good and they are often quite long. In most cases, it
is thus better to use the :opt:`--name` option for overriding it, as
in the second example below::

   pybot my_tests.html your_tests.html
   pybot --name Example path/to/tests/pattern_*.html


Test execution order
''''''''''''''''''''

Test cases in a test suite are executed in the order they are specified
in the test case file where they are created. Test suites inside a higher level
test suite are executed in case-insensitive alphabetical order based on the file
or directory name. Finally, if multiple files and/or directories are given from
the command line, they are executed in the order they are specified.

If there is a need to use certain test suite execution order inside a
directory, it is possible to add prefixes like :path:`01` and
:path:`02` into file and directory names. Starting from Robot
Framework 2.1, such prefixes are automatically removed if they are
separated from the base name with two underscores like in the examples
below. These prefixes will not be visible anywhere in reports or
logs::

   01__my_suite.html -> My Suite
   02__another_suite.html -> Another Suite

If the alphabetical ordering of test suites inside suites is problematic, 
a good workaround is giving them separately in the required order. This easily
leads to overly long start-up commands, but `argument files`_  allow listing 
files nicely one file per line. It is also possible to `randomize the execution 
order of test cases or test suites`__  using :opt:`--runmode` option.

__ `Setting the execution mode`_


Using command line options
''''''''''''''''''''''''''

Robot Framework provides a number of command line options that can be
used to control how test cases are executed and what outputs are
generated. The syntax for using them is explained in this
section. What options actually exist and how they can be used is
discussed elsewhere in this chapter.

Short and long options
``````````````````````

Options always have a long name, such as :opt:`--name`, and the
most frequently needed options also have a short name, such as
:opt:`-N`. In addition to that, long options can be shortened as
long as they are unique. For example, :cli:`--logle DEBUG` works,
while :cli:`--lo log.html` does not, because the former matches only
:opt:`--loglevel`, but the latter matches several options. Short
and shortened options are practical when executing test cases
manually, but long options are recommended in `start-up scripts`__,
because they are easier to understand.

__ `Creating start-up scripts`_

The long option format is case-insensitive, which facilitates writing option
names in an easy-to-read format. For example, :opt:`--SuiteStatLevel`
is equivalent to, but easier to read than :opt:`--suitestatlevel`.

Setting option values
`````````````````````

Most of the options require a value, which is given after the option
name. Both short and long options accept the value separated
from the option name with a space, as in :cli:`--include tag`
or :cli:`-i tag`. With long options, the separator can also be the
equals sign, as in :cli:`--include=tag`, and with short options the
separator can be omitted, as in :cli:`-itag`.

Some options can be specified several times. For example,
:cli:`--variable VAR1:value --variable VAR2:another` sets two
variables. If the options that take only one value are used several
times, the value given last is effective.


Option value as simple pattern
``````````````````````````````

Many of the options take arguments as *simple patterns*. This means
that :code:`*` and :code:`?` can be used as special characters, so
that the former matches any string (even an empty string) and the
latter matches any single character. For example, :cli:`--include
prefix-\*` matches all tags starting with :code:`prefix-`, and
:cli:`--include a???` matches any tag that is four characters long and
starts with a character :code:`a`.


Generated outputs
'''''''''''''''''

The most visible output from test execution is the output displayed in
the command line. All executed test suites and test cases, as well as
their statuses, are shown there in real time. The example below shows the
output from executing a simple test suite with only two test cases::

   ==============================================================================
   Example test suite
   ==============================================================================
   First test :: Possible documentation is here                          | PASS |
   ------------------------------------------------------------------------------
   Second test                                                           | FAIL |
   Error message is displayed here
   ==============================================================================
   Example test suite                                                    | FAIL |
   2 critical tests, 1 passed, 1 failed
   2 tests total, 1 passed, 1 failed
   ==============================================================================
   Output:  /path/to/output.xml
   Report:  /path/to/report.html
   Log:     /path/to/log.html

The command line output is very limited, and separate output files are
normally needed for investigating the test execution. As the example
above shows, three output files are generated by default. The first
one is in the XML format and contains all the information about test
execution. The second is a higher-level report and the third is a more
detailed log file. These files and other possible output files are
discussed in more detail in the section `Different output files`_.


Return codes
''''''''''''

Runner scripts communicate the overall test execution status to the
system running them using return codes. The basic rule is that the
return code is zero, which is a typical return code for success, when
the execution starts successfully and no `critical test`_
fail. Possible return codes are explained in the table below.

.. table:: Possible return codes
   :class: tabular

   ========  ==========================================
      RC                    Explanation
   ========  ==========================================
   0         All critical tests passed.  
   1-249     Returned number of critical tests failed.
   250       250 or more critical failures.
   251       Help or version information printed.
   252       Invalid test data or command line options.
   253       Test execution stopped by user.
   255       Unexpected internal error.
   ========  ==========================================

Return codes should always be easily available after the execution,
which makes it easy to automatically determine the overall execution
status. For example, in bash shell the return code is in special
variable :code:`$?`, and in Windows it is in :code:`%ERRORLEVEL%`
variable. If you use some external tool for running tests, consult its
documentation for how to get the return code.


Errors and warnings during execution
''''''''''''''''''''''''''''''''''''

During the test execution there can be unexpected problems like
failing to import a library or a resource file or a keyword being
deprecated__. Depending on the severity such problems are categorized
as errors or warnings and they are written into the console (using the
standard error stream), shown on a separate *Test Execution Errors*
section in log files, and also written into Robot Framework's own
`system log`_. Normally these errors are generated by Robot Framework
core, but libraries can use `log level WARN`__ to write warnings.
Example below illustrates how errors and warnings look like in the log
file.

.. raw:: html

   <table class="messages">
     <tr>
       <td class="time">20090322&nbsp;19:58:42.528</td>
       <td class="error level">ERROR</td>
       <td class="msg">Error in file '/home/robot/tests.html' in table 'Setting' in element on row 2: Resource file 'resource.html' does not exist</td>
     </tr>
     <tr>
       <td class="time">20090322&nbsp;19:58:43.931</td>
       <td class="warn level">WARN</td>
       <td class="msg">Keyword 'SomeLibrary.Example Keyword' is deprecated. Use keyword `Other Keyword` instead.</td>
     </tr>
   </table>

__ `Deprecating keywords`_
__ `Logging information`_


Post-processing outputs
~~~~~~~~~~~~~~~~~~~~~~~

`XML output files`_ that are generated during the test execution can be
post-processed afterwards by the :prog:`rebot` tool, which is an integral
part of Robot Framework. It is used automatically when test
reports and logs are generated during the test execution, but there
are also good grounds for using it separately after the execution.

The basic syntax for using :prog:`rebot` is exactly the same as when
`starting test execution`_, `return codes`_ are the same, and also
most of the command line options are identical. The main difference is
that arguments to :prog:`rebot` are XML output files instead of test
data files or directories.


Creating different reports and logs
'''''''''''''''''''''''''''''''''''

You can use :prog:`rebot` for creating the same reports and logs that
are created automatically during the test execution. Of course, it is
not sensible to create the exactly same files, but, for example,
having one report with all test cases and another with only some
subset of tests can be useful. Another common usage is creating only
the output file when running tests (log and report generation can be
disabled with options :opt:`--log NONE` and :opt:`--report NONE`) and
generating logs and reports later. Tests can, for example, be executed
on different environments, output files collected to a central place,
and reports and logs created there. If generating reports and logs
takes a lot of time when running tests on Jython, it is a good idea to
try if using :prog:`rebot`, which always runs on Python, is any
faster.

::

   rebot output.xml
   rebot path/to/output_file.xml
   rebot --include smoke --name Smoke_Tests c:\results\output.xml

.. Note:: When running tests with Jython, the default JVM maximum
          memory size may not be enough for creating reports and logs
          if output files are very large. If that happens, you can
          either `increase the JVM's maximum memory`__, or disable
          creating reports and logs when tests are executed and use
          :prog:`rebot` to generate them afterwards.

__ `Modifying Java startup parameters`_


Combining outputs
'''''''''''''''''

The most important feature of :prog:`rebot` is its ability to combine
outputs from different test execution rounds. This capability allows,
for example, running the same test cases on different environments and
generating an overall report from all outputs. Combining outputs is
extremely easy, all that needs to be done is giving several output
files as arguments::

   rebot output1.xml output2.xml
   rebot outputs/*.xml

When outputs are combined, a new top-level test suite is created so
that test suites in the given output files are its child suites. This
works the same way when `multiple test data files or directories are
executed`__, and also in this case the name of the top-level test
suite is created by joining child suite names with an ampersand (&)
and spaces. These automatically generated names are not that good, and
it is often a good idea to use :opt:`--name` to give a more
meaningful name::

   rebot --name Browser_Compatibility firefox.xml opera.xml safari.xml ie.xml
   rebot --include smoke --name Smoke_Tests c:\results\*.xml

__ `Specifying test data to be executed`_


Getting help on the command line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Both when executing test cases with :prog:`pybot` or :prog:`jybot` and
when post-processing reports with :prog:`rebot`, it is possible to get
command line help with the option :opt:`--help` and its short version
:opt:`-h`. These help texts have a short general overview and
briefly explain the available command line options.

All runner scripts also support getting the version information with
the option :opt:`--version`. This information also contains Python
or Jython version and the platform type::

   $ pybot --version
   Robot Framework 2.0.3 (Python 2.5.1 on cygwin)

   C:\>jybot --version
   Robot Framework 2.0.3 (Jython 2.2 on java1.5.0_16)

   C:\>rebot --version
   Rebot 2.0.3 (Python 2.5.2 on win32)


Escaping complicated characters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Because spaces are used for separating options from each other, it is
problematic to use them in option values.  Some options, such as
:opt:`--name`, automatically convert underscores to spaces, but
with others spaces must be escaped. Additionally, many special
characters are complicated to use on the command line.
Because escaping complicated characters with a backslash or quoting
the values does not always work too well, Robot Framework has its own
generic escaping mechanism. Another possibility is using `argument
files`_ where options can be specified in the plain text format. Both of
these mechanisms work both when executing tests and when
post-processing outputs, and also some of the external supporting
tools have the same or similar capabilities.

In Robot Framework's command line escaping mechanism,
problematic characters are escaped with freely selected text. The
command line option to use is :opt:`--escape` (short version
:opt:`-E`), which takes an argument in the format :opt:`what:with`,
where :opt:`what` is the name of the character to escape and
:opt:`with` is the string to escape it with. Characters that can
be escaped are listed in the table below:

.. table:: Available escapes
   :class: tabular

   =========  =============  =========  =============
   Character   Name to use   Character   Name to use
   =========  =============  =========  =============
   &          amp            (          paren1
   '          apos           )          paren2
   @          at             %          percent
   \\         blash          \|         pipe
   :          colon          ?          quest
   ,          comma          "          quot
   {          curly1         ;          semic
   }          curly2         /          slash
   $          dollar         \          space
   !          exclam         [          square1
   >          gt             ]          square2
   #          hash           \*         star
   <          lt             \          \   
   =========  =============  =========  =============

The following examples make the syntax more clear. In the
first example, the metadata :opt:`X` gets the value :code:`Value with
spaces`, and in the second variable :var:`${VAR}` is assigned to
:code:`"Hello, world!"`::

    --escape space:_ --metadata X:Value_with_spaces
    -E space:SP -E quot:QU -E comma:CO -E exclam:EX -v VAR:QUHelloCOSPworldEXQU

Note that all the given command line arguments, including paths to test
data, are escaped. Escape character sequences thus need to be
selected carefully.


Argument files
~~~~~~~~~~~~~~

Problematic characters can often be handled easily using *argument files*.
These files can contain both command line options and paths
to the test data, one per line. They are taken into use with 
:opt:`--argumentfile` option (short option :opt:`-A`) along with possible other
command line options.  Argument files can contain any ASCII
characters without escaping, but spaces in the beginning and end
of lines are ignored. Additionally, empty lines and lines starting with
a hash mark (#) are ignored::

   --doc This is an example (where "special characters" are ok!)
   --metadata X:Value with spaces
   --variable VAR:Hello, world!
   # This is a comment
   path/to/my/tests

Another important usage for argument files is specifying input files or
directories in certain order. This can be very useful if the `alphabetical
default execution order`__ is not suitable::

   --name My Example Tests
   tests/some_tests.html
   tests/second.html
   tests/more/tests.html
   tests/more/another.html
   tests/even_more_tests.html

When an argument file is used on the command line, its contents are
placed to the original list of arguments to the same place where the
argument file option was. Argument files can be used either alone so
that they contain all the options and paths to the test data, or along
with other options and paths. Starting from Robot Framework 2.1 it is
possible to use :opt:`--argumentfile` option multiple times or even
recursively::

   pybot --argumentfile all_arguments.txt
   pybot --name example --argumentfile other_options_and_paths.txt
   pybot --argumentfile default_options.txt --name example my_tests.html
   pybot -A first.txt -A second.txt -A third.txt some_tests.tsv

__ `Specifying test data to be executed`_


Creating start-up scripts
~~~~~~~~~~~~~~~~~~~~~~~~~

Test cases are often executed automatically by a continuous
integration system or some other mechanism. In such cases, there is a
need to have a script for starting the test execution, and possibly
also for post-processing outputs somehow. Similar scripts are also
useful when running tests manually, especially if a large number of
command line options are needed or setting up the test environment is
complicated.

In UNIX-like environments, shell scripts provide a simple but powerful
mechanism for creating custom start-up scripts. Windows batch files
can also be used, but they are more limited and often also more
complicated. A platform-independent alternative is using Python or
some other high-level programming language. Regardless of the
language, it is recommended that long option names are used, because
they are easier to understand than the short names.

In the first examples, the same web tests are executed with different
browsers and the results combined afterwards. This is easy with shell
scripts, as practically you just list the needed commands one after
another:

.. sourcecode:: bash

   #!/bin/bash
   pybot --variable BROWSER:Firefox --name Firefox --log none --report none --output out/fx.xml login
   pybot --variable BROWSER:IE --name IE --log none --report none --output out/ie.xml login
   rebot --name Login --splitoutputs 1 --outputdir out --output login.xml out/fx.xml out/ie.xml

Implementing the above example with Windows batch files is not very
complicated, either. The most important thing to remember is that
because :prog:`pybot` and :prog:`rebot` are implemented as batch
files, :prog:`call` must be used when running them from another batch
file. Otherwise execution would end when the first batch file is
finished.

.. sourcecode:: bat

   @echo off
   call pybot --variable BROWSER:Firefox --name Firefox --log none --report none --output out\fx.xml login
   call pybot --variable BROWSER:IE --name IE --log none --report none --output out\ie.xml login
   call rebot --name Login --splitoutputs 1 --outputdir out --output login.xml out\fx.xml out\ie.xml

In the next examples, JAR files under the :path:`lib` directory are
put into CLASSPATH before starting the test execution. In these
examples, start-up scripts require that paths to the executed test
data are given as arguments. It is also possible to use command line
options freely, even though some options have already been set in the
script. All this is relatively straight-forward using bash:

.. sourcecode:: bash

   #!/bin/bash

   cp=.
   for jar in lib/*.jar; do
       cp=$cp:$jar
   done
   export CLASSPATH=$cp

   jybot --ouputdir /tmp/logs --splitoutputs 2 $*

Implementing this using Windows batch files is slightly more complicated. The
difficult part is setting the variable containing the needed JARs inside a For
loop, because, for some reason, that is not possible without a helper
function. There is no need to use :prog:`call`, because only one batch
file is executed.

.. sourcecode:: bat

   @echo off

   set CP=.
   for %%jar in (lib\*.jar) do (
       call :set_cp %%jar
   )
   set CLASSPATH=%CP%

   jybot --ouputdir c:\temp\logs --splitoutputs 2 %*

   goto :eof

   :: Helper for setting variables inside a for loop
   :set_cp
       set CP=%CP%;%1
   goto :eof


Modifying Java startup parameters
'''''''''''''''''''''''''''''''''

Sometimes there is need to alter the Java startup parameters. The most
common use case is increasing the JVM maximum memory size as the
default value may not be enough for creating reports and logs when
outputs are very big. How to give the parameters to Java depends on
the Jython version.

With Jython 2.2 you need to modify the Jython start-up script
(:prog:`jython` shell script or :prog:`jython.bat` batch file) by
adding the needed options (e.g. :opt:`-Xmx1024m` which sets the
maximum memory to 1024 megabytes) to the :prog:`java` command. On
Windows the final command could look like this::

   "C:\Java\jre1.6.0\bin\java.exe" -Xmx1024m -Dpython.home="C:\Jython22" -classpath "C:\Jython22\jython.jar;%CLASSPATH%" org.python.util.jython %ARGS%

With Jython 2.5 it is also possible, and easier, to give the Java
parameters with :opt:`-J` option to the Jython interpreter. This means
that you can modify the :prog:`jybot` start-up script instead of
Jython scripts. The last line of the :prog:`jybot` script can, again in
Windows, be edited like below::

  %jython% -J-Xmx1024m %runner% %*
