Creating user keywords
----------------------

Keyword tables are used to create new higher-level keywords by combining existing
keywords together. These keywords are called *user keywords* to differentiate them
from lowest level *library keywords* that are implemented in test libraries. The 
syntax for creating user keywords is very close to the
syntax for creating test cases, which makes it easy to learn.

.. contents:: 
   :depth: 2
   :local: 


User keyword syntax
~~~~~~~~~~~~~~~~~~~

Basic syntax
''''''''''''

In many ways, the overall user keyword syntax is identical to the
`test case syntax`_.  User keywords are created in keyword tables
which differ from test case tables only by the name that is used to
identify them. User keyword names are in the first column similarly as
test cases names. Also user keywords are created from keywords, either
from keywords in test libraries or other user keywords. Keyword names
are normally in the second column, but when setting variables from
keyword return values, they are in the subsequent columns.

.. table:: User keyword examples
   :class: example

   =======================  =================  =======================  =========== 
           Keyword               Action               Argument          Argument 
   =======================  =================  =======================  ===========
   Open Login Page          Open Browser       \http://host/login.html  \
   \                        Title Should Be    Login Page               \
   \                        \                  \                        \
   Title Should Start With  [Arguments]        ${expected}              \
   \                        ${title} =         Get Title                \
   \                        Should Start With  ${title}                 ${expected}
   =======================  =================  =======================  ===========

Most user keywords take some arguments. This important feature is used
already in the second example above, and it is explained in detail
`later in this section`__, similarly as `user keyword return
values`_.

__ `User keyword arguments`_

User keywords can be created in `test case files`_, `resource files`_,
and `test suite initialization files`_. Keywords created in resource
files are available for files using them, whereas other keywords are
only available in the files where they are created.

Settings in the Keyword table
'''''''''''''''''''''''''''''

User keywords can have similar settings as `test cases`__, and they
have the same square bracket syntax separating them from keyword
names. All available settings are listed below and explained later in
this section.

__ `Settings in the test case table`_

`[Documentation]`:opt:
   Used for setting a `user keyword documentation`__.

__ `User keyword name and documentation`_

`[Arguments]`:opt:
   Specifies `user keyword arguments`_.

`[Return]`:opt:
   Specifies `user keyword return values`_.

`[Timeout]`:opt:
   Sets the possible `user keyword timeout`_. Timeouts_ are discussed
   in a section of their own.


User keyword name and documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The user keyword name is defined in the first column of the user
keyword table. Of course, the name should be descriptive, and it is
acceptable to have quite long keyword names. Actually, when creating
use-case-like test cases, the highest-level keywords are often
formulated as sentences or even paragraphs.

User keywords can have a documentation that is set with the
:opt:`[Documentation]` setting, exactly as `test case
documentation`_. This setting documents the user keyword in the test
data. It is also shown in a more formal keyword documentation, which
the `libdoc.py`_ tool can create from `resource files`_. Finally, the
first line of the documentation, everything until the first :code:`\\n`
sequence, is shown as a keyword documentation in test logs.

Sometimes keywords need to be removed, replaced with new ones, or
deprecated for other reasons.  User keywords can be marked deprecated
by starting the documentation with :code:`*DEPRECATED*`, which will
cause a warning when the keyoword is used. For more information, see
`Deprecating keywords`_ section.


User keyword arguments
~~~~~~~~~~~~~~~~~~~~~~

Most user keywords need to take some arguments. The syntax for
specifying them is probably the most complicated feature normally
needed with Robot Framework, but even that is relatively easy,
particularly in most common cases. Arguments are normally specified with
the :opt:`[Arguments]` setting, and argument names use the same
syntax as variables_, for example :var:`${arg}`.

Positional arguments
''''''''''''''''''''

The simplest way to specify arguments (apart from not having them at all)
is using only positional arguments. In most cases, this is all 
that is needed.

The syntax is such that first the :opt:`[Arguments]` setting is
given and then argument names are defined in the subsequent
cells. Each argument is in its own cell, using the same syntax as with
variables. The keyword must be used with as many arguments as there
are argument names in its signature. The actual argument names do not
matter to the framework, but from users' perspective they should should
be as descriptive as possible. It is recommended
to use lower-case letters in variable names, either as
:var:`${my_arg}`, :var:`${my arg}` or :var:`${myArg}`.

.. table:: User keyword taking different number of arguments
   :class: example

   ===============  ===========  ========================  ==========  ==========
       Keyword        Action             Argument           Argument    Argument
   ===============  ===========  ========================  ==========  ==========
   One Argument     [Arguments]  ${arg_name}               \           \
   \                Log          Got argument ${arg_name}  \           \
   \                \            \                         \           \
   Three Arguments  [Arguments]  ${arg1}                   ${arg2}     ${arg3}
   \                Log          1st argument: ${arg1}     \           \
   \                Log          2nd argument: ${arg2}     \           \
   \                Log          3rd argument: ${arg3}     \           \
   ===============  ===========  ========================  ==========  ==========

Default values
''''''''''''''

Positional arguments are probably sufficient in most
situations. However, sometimes it is useful to be able to have a
keyword that takes a different number of arguments and has default
values for those that are not given. Also user keywords allow this,
and the needed new syntax does not add very much to the already
discussed basic syntax. In short, default values are added to
arguments, so that first there is the equals sign (:code:`=`) and then
the value, for example :var:`${arg}=default`. There can be many
arguments with defaults, but they all must be given after the normal
positional arguments.

.. table:: User keyword with default values for arguments
   :class: example

   =================================  ===============  =====================  ===================
                 Keyword                   Action             Argument              Argument
   =================================  ===============  =====================  ===================
   One Argument With Default Value    [Arguments]      ${arg}=default value   \
   \                                  [Documentation]  This keyword takes     0-1 arguments
   \                                  Log              Got argument ${arg}    \
   \                                  \                \                      \
   Two Arguments With Defaults        [Arguments]      ${arg1}=default 1      ${arg2}=default 2
   \                                  [Documentation]  This keyword takes     0-2 arguments
   \                                  Log              1st argument ${arg1}   \
   \                                  Log              2nd argument ${arg2}   \
   \                                  \                \                      \
   One Required And One With Default  [Arguments]      ${required}            ${optional}=default
   \                                  [Documentation]  This keyword takes     1-2 arguments
   \                                  Log              Required: ${required}  \
   \                                  Log              Optional: ${optional}  \
   =================================  ===============  =====================  ===================

As all Pythonistas must have already noticed, the syntax for specifying default arguments
is heavily inspired by Python syntax for function default values.

Variable number of arguments
''''''''''''''''''''''''''''

Sometimes, but more and more seldom, even default values are not
enough and there is a need for a keyword accepting any number of
arguments. User keywords support also this. All that is needed is
having `list variables`_ such as :var:`@{varargs}` as the last
argument in the keyword signature. This syntax can be combined with
the previously described positional arguments and default values, and
at the end the list variable gets all the leftover arguments that do
not match other arguments. The list variable can thus have any number
of items, even zero.

.. table:: User keywords accepting variable number of arguments
   :class: example

   ===========================  ===========  ================  ==========  ==========
              Keyword             Action         Argument       Argument    Argument
   ===========================  ===========  ================  ==========  ==========
   Any Number Of Arguments      [Arguments]  @{varargs}        \           \
   \                            Log Many     @{varargs}        \           \
   \                            \            \                 \           \
   One Or More Arguments        [Arguments]  ${required}       @{rest}     \       
   \                            Log Many     ${required}       @{rest}     \
   \                            \            \                 \           \
   Required, Default, Varargs   [Arguments]  ${req}            ${opt}=42   @{others}
   \                            Log          Required: ${req}  \           \
   \                            Log          Optional: ${opt}  \           \
   \                            Log          Others:           \           \
   \                            : FOR        ${item}           IN          @{others}
   \                            \            Log               ${item}     \     
   ===========================  ===========  ================  ==========  ==========

Notice that if the last keyword above is used with more than one
argument, the second argument :var:`${opt}` always gets the given
value instead of the default value. This happens even if the given
value is empty. The last example also illustrates how a variable
number of arguments accepted by a user keyword can be used in a `for
loops`_. This combination of two rather advanced functions can
sometimes be very useful.

Again, Pythonistas probably notice that the variable number of
arguments syntax is very close to the one in Python.


Embedding arguments to keyword name
'''''''''''''''''''''''''''''''''''


.. table:: Test cases using keywords with embedded arguments

   ====================  =============================
        Test Case                   Step
   ====================  =============================
   Add two numbers       Given I have Calculator open
   \                     When I add 2 and 40
   \                     Then the result should be 42
   \
   Add negative numbers  Given I have Calculator open
   \                     When I add 1 and -2
   \                     Then the result should be -1
   ====================  =============================

.. table:: 
   :class: example

   ======================================  ===============  ============  ============
                  Keyword                       Action        Argument      Argument
   ======================================  ===============  ============  ============
   Given I have ${program} open            Start Program    ${program}
   \
   When I add ${number 1} and ${number 2}  Input Number     ${number 1}
   \                                       Push Button      \+
   \                                       Input Number     ${number 2}
   \                                       Push Button      \=
   \
   Then the result should be ${expected}   ${result} =      Get Result
   \                                       Should Be Equal  ${result}     ${expected}
   ======================================  ===============  ============  ============


User keyword return values
~~~~~~~~~~~~~~~~~~~~~~~~~~

Similarly as library keywords, also user keywords can return
values. Return values are defined with the :opt:`[Return]`
setting. The values can then be `assigned to variables`__ in test
cases or other user keywords.

__ `Return values from keywords`_

In a typical case, a user keyword returns one value and it can be set
to a scalar variable. This is done by having the return value in the
next cell after the :opt:`[Return]` setting. User keywords can
also return several values, which can then be assigned into several
scalar variables at once, to a list variable, or to scalar variables
and a list variable. Several values can be returned simply by
specifying those values in different cells after the
:opt:`[Return]` setting.

.. table:: User keywords returning values
   :class: example

   ================  ============  ===================  ===================  ===================
       Test Case        Action         Argument              Argument            Argument
   ================  ============  ===================  ===================  ===================
   One Return Value  ${ret} =      Return One Value     argument             \
   \                 Some Keyword  ${ret}               \                    \
   \                 \             \                    \                    \
   Multiple Values   ${a}          ${b}                 ${c} =               Return Three Values
   \                 @{list} =     Return Three Values  \                    \
   \                 ${scalar}     @{rest} =            Return Three Values  \
   ================  ============  ===================  ===================  ===================

.. table::
   :class: example

   ===================  ============  ==============  ===========  ==========
         Keyword           Action        Argument       Argument    Argument
   ===================  ============  ==============  ===========  ==========
   Return One Value     [Arguments]   ${arg}          \            \ 
   \                    Do Something  ${arg}          \            \ 
   \                    ${value} =    Get Some Value  \            \      
   \                    [Return]      ${value}        \            \
   \                    \             \               \            \ 
   Return Three Values  [Return]      foo             bar          zap
   ===================  ============  ==============  ===========  ==========
