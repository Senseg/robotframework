Using test libraries
--------------------

Test libraries contain those lowest-level keywords, often called
*library keywords*, which actually interact with the system under
test. All test cases always use keywords from some library, often
through higher-level `user keywords`_. This section explains how to
take test libraries into use and how to use the keywords they
provide. `Creating test libraries`_ is described in a separate
section.


.. contents:: 
   :depth: 2
   :local: 


Taking test libraries into use
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Instructions for taking test libraries into use are given in the
subsections below.

Using Library setting
'''''''''''''''''''''

Test libraries are normally imported using the :opt:`Library`
setting in the Setting table and having the library name in the
subsequent column. The library name is case-sensitive (it is the name
of the module or class implementing the library and must be exactly
correct), but any spaces in it are ignored. With Python libraries in
modules or Java libraries in packages, the full name including the
module or package name must be used. In those cases where the library
needs arguments, they are listed in the columns after the library
name. Both the library name and arguments can be set using variables.

.. table:: Importing test libraries
   :class: example

   =========  ===================  =======  =======
    Setting          Value          Value    Value
   =========  ===================  =======  =======
   Library    OperatingSystem      \        \
   Library    com.company.TestLib  \        \
   Library    MyLibrary            arg1     arg2
   Library    ${LIBRARY}           \        \
   =========  ===================  =======  =======


It is possible to import test libraries in `test case files`_,
`resource files`_ and `test suite initialization files`_. In all these
cases, all the keywords in the imported library are available in that
file. With resource files, those keywords are also available in other
files using them.

Using Import Library keyword
''''''''''''''''''''''''''''

Another possibility to take a test library into use is using the
keyword :name:`Import Library` from the `BuiltIn library`_. This keyword
takes the library name and possible arguments similarly as the
:opt:`Library` setting. Keywords from the imported library are
available in the test suite where the :name:`Import Library` keyword was
used. This approach is useful in cases where the library is not
available when the test execution starts and only some other keywords
make it available.

.. table:: Using Import Library keyword
   :class: example

   ===========  =================  ==========  ==========  ==========
    Test Case       Action          Argument    Argument    Argument
   ===========  =================  ==========  ==========  ==========
   Example      Do Something       \           \           \
   \            Import Library     MyLibrary   arg1        arg2
   \            KW From Mylibrary  \           \           \
   ===========  =================  ==========  ==========  ==========


Library search path
'''''''''''''''''''

Robot Framework can import a library only if the library class or
module can be found from the library search path. Basically, this
means that the library code and all its possible dependencies must be
in :code:`PYTHONPATH` or, when running tests on Jython, in a
:code:`CLASSPATH`. `Setting the library search path`__ is explained in
a section of its own, and well-developed libraries either do that
automatically or have clear instructions on how to do it.

__ `Adjusting library search path`_


Setting custom name to test library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The library name is shown in test logs before keyword names, and if
multiple keywords have the same name, they must be used so that the
`keyword name is prefixed with the library name`__. The library name
is got normally from the module or class name implementing it, but
there are some situations where changing it is desirable:

__ `Handling keywords with same names`_

- There is a need to import the same library several times with
  different arguments. This is not possible otherwise.

- The library name is inconveniently long. This can happen, for
  example, if a Java library has a long package name.

- You want to use variables to import different libraries in
  different environments, but refer to them with the same name.

- The library name is misleading or otherwise poor. In this case,
  changing the actual name is, of course, a better solution.


The basic syntax for specifying the new name is having the text
:code:`WITH NAME` (case-insensitive) after the library name and then
having the new name in the next cell. The specified name is shown in
logs and must be used in the test data when using keywords' full name
(:name:`LibraryName.Keyword Name`).

.. table:: Importing libraries with custom names
   :class: example

   =========  ===================  =========  =========
    Setting          Value           Value      Value
   =========  ===================  =========  =========  
   Library    com.company.TestLib  WITH NAME  TestLib  
   Library    ${LIBRARY}           WITH NAME  MyName
   =========  ===================  =========  =========


Possible arguments to the library are placed into cells between the
original library name and the :code:`WITH NAME` text. The following example
illustrates how the same library can be imported several times with
different arguments: 

.. table:: Importing the same library several times with a different name
   :class: example

   =========  ===========  =============  =======  =========  =========
    Setting      Value          Value      Value     Value      Value
   =========  ===========  =============  =======  =========  =========
   Library    SomeLibrary  localhost      1234     WITH NAME  LocalLib 
   Library    SomeLibrary  server.domain  8080     WITH NAME  RemoteLib 
   =========  ===========  =============  =======  =========  =========

.. table::
   :class: example

   ===========  ========================  ===========  ==========
    Test Case             Action           Argument     Argument   
   ===========  ========================  ===========  ==========
   My Test      LocalLib.Some Keyword     some arg     second arg 
   \            RemoteLib.Some Keyword    another arg  whatever 
   \            LocalLib.Another Keyword  \            \   
   ===========  ========================  ===========  ==========


Setting a custom name to a test library works both when importing a
library in the Setting table and when using the :name:`Import Library` keyword.


Standard libraries
~~~~~~~~~~~~~~~~~~~

Some test libraries are distributed with Robot Framework and these
libraries are called *standard libraries*. These are the available
standard libraries:

  - `BuiltIn library`_
  - `OperatingSystem library`_
  - `Telnet library`_
  - `Collections library`_
  - `Screenshot library`_

The BuiltIn library is special, because it is taken into use
automatically and thus its keywords are always available. Other
standard libraries need to be imported in the same way as any other
libraries, but there is no need to install them. Additionally, they
work when running tests both with Python and Jython (with the
Screenshot library as an exception).

New standard libraries can, and will, be added in the future. If you
have an idea for a new standard library, or even have one that could
be incorporated immediately, please contact Robot Framework
developers. In general, a library is a good candidate to be added into
standard libraries if it is generic, works on both Python and Jython
without any external dependencies, and is adequately tested and
documented.


BuiltIn library
'''''''''''''''

The BuiltIn library provides a set of generic keywords needed
often. The provided keywords allow functions for verifications (for
example, :name:`Should Be Equal`), conversions (for example, :name:`Convert
To Integer`) and for various other purposes (for example, :name:`Log` and
:name:`Sleep`).

The names of the keywords in the BuiltIn library have been renamed for
Robot Framework version 1.8. All the old keywords still work, but the
long names (the names visible in log files) of the keywords that are
deprecated begin with :name:`DeprecatedBuiltIn.` (for example,
:name:`DeprecatedBuiltIn.Equals`).

For more information, see the `BuiltIn library documentation`_.


OperatingSystem library
'''''''''''''''''''''''

The OperatingSystem library enables various operating-system-related
tasks to be performed in the system running Robot Framework. It can,
among other things, execute commands (for example, :name:`Run`) and
check whether files exist or not (for example, :name:`File Should
Exist`). The idea of the library is to wrap all relevant functions
from the standard Python modules :code:`os`, :code:`os.path` and
:code:`shutil`, but other related functions can also be added.

The names of the keywords in the OperatingSystem library have been
renamed for Robot Framework version 1.8. All the old keywords still
work, but the long names (names visible in log files) of the keywords
that are deprecated begin with :name:`DeprecatedOperatingSystem.` (for
example, :name:`DeprecatedOperatingSystem.Fail Unless File Empty`).

For more information, see the `OperatingSystem library documentation`_.


Telnet library
''''''''''''''

The Telnet library enables testing over a Telnet connection. It
has functions for logging into a Telnet server, running commands on
the server and returning the output. The Telnet library extends
Python's own :code:`telnetlib` module and it supports several
simultaneous connections.

For more information, see the `Telnet library documentation`_.


Collections library
'''''''''''''''''''

The Collections library provides a set of keywords for handling
Python's standard list and dictionary data structures. For more
information about lists and dictionaries, see `Python Library
Reference`_ . The provided keywords allow functions for creating
dictionaries (:name:`Create Dictionary`), modifying lists and
dictionaries (for example, :name:`Append To List`), and checking the
equality of lists and dictionaries (for example, :name:`Dictionaries
Should Be Equal`).

For more information, see the `Collections library documentation`_.

.. _Python Library Reference: http://docs.python.org/lib/lib.html


Screenshot library
''''''''''''''''''

The Screenshot library provides a way to capture and store screenshots
of the whole desktop. This library is implemented with Java AWT APIs,
so it can be used only when running Robot Framework with Jython.

For more information, see the `Screenshot library documentation`_.



External libraries
~~~~~~~~~~~~~~~~~~~

Any test library that is not one of the standard libraries is, by
definition, *an external library*. Robot Framework developers provide
some generic libraries, such as SeleniumLibrary, which are not
packaged with the framework itself, because they require external
dependencies. Generic libraries can also be provided by other parties,
and most teams have also some custom libraries only for themselves.

Different external libraries can have a totally different mechanism
for installing and introducing them. Quite often they also require
some other dependencies to be installed separately. All libraries
should have clear instructions on this and preferably automate the
installation.
