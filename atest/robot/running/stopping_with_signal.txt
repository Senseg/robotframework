*** Settings ***
Force Tags      regression  pybot  jybot
Resource        atest_resource.txt
Library  ProcessManager.py

*** Test Cases ***
SIGINT Signal Should Stop Test Execution Gracefully
    Start And Send Signal  without_any_timeout.txt  One Signal  SIGINT  0s
    Process Output For Graceful Shutdown
    Check Test Cases Have Failed Correctly

SIGTERM Signal Should Stop Test Execution Gracefully
    [tags]  non windows
    Start And Send Signal  without_any_timeout.txt  One Signal  SIGTERM  0s
    Process Output For Graceful Shutdown
    Check Test Cases Have Failed Correctly

One Signal Should Stop Test Execution Gracefully When Run Keyword Is Used
    Start And Send Signal  run_keyword.txt  One Signal  SIGTERM  0s
    Process Output For Graceful Shutdown
    Check Test Cases Have Failed Correctly

One Signal Should Stop Test Execution Gracefully When Test Timeout Is Used
    Start And Send Signal  test_timeout.txt  One Signal  SIGTERM  0s
    Process Output For Graceful Shutdown
    Check Test Cases Have Failed Correctly

One Signal Should Stop Test Execution Gracefully When Keyword Timeout Is Used
    Start And Send Signal  keyword_timeout.txt  One Signal  SIGTERM  0s
    Process Output For Graceful Shutdown
    Check Test Cases Have Failed Correctly

Two SIGINT Signals Should Stop Test Execution Forcefully
    Start And Send Signal  without_any_timeout.txt  Two Signals  SIGINT  2s
    Check Tests Have Been Forced To Shutdown

Two SIGTERM Signals Should Stop Test Execution Forcefully
    [tags]  non windows
    Start And Send Signal  without_any_timeout.txt  Two Signals  SIGTERM  2s
    Check Tests Have Been Forced To Shutdown

Two Signals Should Stop Test Execution Forcefully When Run Keyword Is Used
    Start And Send Signal  run_keyword.txt  Two Signals  SIGINT  2s
    Check Tests Have Been Forced To Shutdown

Two Signals Should Stop Test Execution Forcefully When Test Timeout Is Used
    [timeout]  1 minute
    Start And Send Signal  test_timeout.txt  Two Signals  SIGINT  2s
    Check Tests Have Been Forced To Shutdown
    [teardown]  Log Info From Process

Two Signals Should Stop Test Execution Forcefully When Keyword Timeout Is Used
    [timeout]  1 minute
    Start And Send Signal  keyword_timeout.txt  Two Signals  SIGINT  2s
    Check Tests Have Been Forced To Shutdown
    [teardown]  Log Info From Process

One Signal Should Stop Test Execution Gracefully And Test Case And Suite Teardowns Should Be Run
    Start And Send Signal  with_teardown.txt  One Signal  SIGINT  0s
    Process Output For Graceful Shutdown
    Check Test Cases Have Failed Correctly
    ${tc} =  Get Test Case  Test
    Check Log Message  ${tc.teardown.msgs[0]}  Logging Test Case Teardown
    ${ts} =  Get Test Suite  With Teardown
    Check Log Message  ${ts.teardown.kws[0].msgs[0]}  Logging Suite Teardown

*** Key Words ***
Start And Send Signal
    [arguments]  ${testcase file}  ${signal method}  ${signal}  ${teardown sleep}
    ${is_jython_in_use} =  Running On Jython  ${INTERPRETER}
    ${test signal file} =  catenate  SEPARATOR=_  robot_signal_test_started  %{USER}  ${INTERPRETER}  .txt
    Remove File  ${TEMPDIR}/${test signal file}
    Run Keyword unless  ${is_jython_in_use}  Start Running Robot  ${test signal file}  running/stopping_with_signal/${testcase file}  ${teardown sleep}
    Run Keyword if  ${is_jython_in_use}  Start Running jybot  ${test signal file}  running/stopping_with_signal/${testcase file}  ${teardown sleep}
    Wait Until Created  ${TEMPDIR}/${test signal file}  5 minutes
    Run Keyword  ${signal method}  ${signal}
    wait until finished

Start Running Robot
    [arguments]  ${test signal file}  ${datasource}  ${teardown sleep}
    Set Runners
    ${path to datasource} =  Set Variables And Get Datasources  ${datasource}
    ${path to runner} =  Join Path  ${ROBOTPATH}  runner.py
    ProcessManager.start process  ${INTERPRETER}  ${path to runner}  --variable  TESTSIGNALFILE:${test signal file}  --output  ${OUTFILE}  --report  None  --log  None  --variable  TEARDOWNSLEEP:${teardown sleep}  ${path to datasource}

Start Running Jybot
    [arguments]  ${test signal file}  ${datasource}  ${teardown sleep}
    ${jybot} =  Get Jython Path
    Set Runners
    ${path to datasource} =  Set Variables And Get Datasources  ${datasource}
    ${path to runner} =  Join Path  ${ROBOTPATH}  runner.py
    ${command to run jython} =  catenate  ${jybot}  ${path to runner}  --variable  TESTSIGNALFILE:${test signal file}  --output  ${OUTFILE}  --report  None  --log  None  --variable  TEARDOWNSLEEP:${teardown sleep}  ${path to datasource}
    log  ${command to run jython}
    ProcessManager.start process  ${jybot}  ${path to runner}  --variable  TESTSIGNALFILE:${test signal file}  --output  ${OUTFILE}  --report  None  --log  None  --variable  TEARDOWNSLEEP:${teardown sleep}  ${path to datasource}

Check Test Cases Have Failed Correctly
    Check Test Case  Test  FAIL  Execution terminated by signal
    Check Test Case  Test2  FAIL  Test execution is stopped due to a fatal error

Check Tests Have Been Forced To Shutdown
    ${stderr string}  ProcessManager.Get Stderr
    Should Contain  ${stderr string}  Execution forcefully stopped

Process Output For Graceful Shutdown
    Wait Until Created  ${OUTFILE}
    Process Output  ${OUTFILE}

One Signal
	[arguments]  ${signal}
	send terminate  ${signal}

Two Signals
	[arguments]  ${signal}
	send terminate  ${signal}
	Busy Sleep  1
	send terminate  ${signal}

Log Info From Process
    Run Keyword If Test Failed  Log Stdout And Stderr