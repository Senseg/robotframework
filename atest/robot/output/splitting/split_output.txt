*** Settings ***
Documentation   Tests for making sure splitting outputs into multiple xml files works while running tests. Making sure that logs and reports are created correctly in this case is tested elsewhere. NO RIDE because it would mess up formatting.
Suite Setup     Run suite with two sub suites so that output is split
Force Tags      pybot  jybot  regression
Resource        atest_resource.txt

*** Variables ***
${OUTBASE}  output

*** Test Cases ***
Correct Sub Outputs Should Be Created
    @{files} =  List Directory  ${OUTDIR}  ${OUTBASE}*.xml
    Should Be True  len(@{files}) == 3
    Should Be Equal  @{files}[0]  ${OUTBASE}-001.xml
    Should Be Equal  @{files}[1]  ${OUTBASE}-002.xml
    Should Be Equal  @{files}[2]  ${OUTBASE}.xml

Sub Outputs Should Have Been Created Before Finishing Index
    ${sub1} =  Get Modified Time  ${OUTDIR}${/}${OUTBASE}-001.xml  epoch
    ${sub2} =  Get Modified Time  ${OUTDIR}${/}${OUTBASE}-002.xml  epoch
    ${index} =  Get Modified Time  ${OUTDIR}${/}${OUTBASE}.xml  epoch
    Should Be True  ${sub1} < ${sub2} <= ${index}

When Index File Is Processed All Sub Outputs Should Be Processed Automatically
    Should Be Equal  ${SUITE.suites[0].tests[0].name}  SubSuite1 First
    Should Be Equal  ${SUITE.suites[1].tests[0].name}  SubSuite2 First

Correct Syslog Messages Should Be Written
    Check Syslog Contains  Output: ${OUTDIR}${/}${OUTBASE}-001.xml
    Check Syslog Contains  Output: ${OUTDIR}${/}${OUTBASE}-002.xml
    Check Syslog Contains  Output: ${OUTDIR}${/}${OUTBASE}.xml

It Should Be Possible To Process Individual Sub Outputs
    Set Suite Variable  $SUITE  ${None}
    ${path1}  ${path 2} =  Create List  ${OUTDIR}${/}${OUTBASE}-001.xml  ${OUTDIR}${/}${OUTBASE}-002.xml
    Run Rebot  ${EMPTY}  ${path1}
    Should Be Equal  ${SUITE.tests[0].name}  SubSuite1 First
    Run Rebot  ${EMPTY}  ${path2}
    Should Be Equal  ${SUITE.tests[0].name}  SubSuite2 First

Only Index Should Be Created If Non-Nested Suite
    @{files} =  My Run Tests  --SplitOutputs 1  misc${/}normal.html
    Should Be True  len(@{files}) == 1
    Should Be Equal  @{files}[0]  ${OUTBASE}.xml
    Should Be Equal  ${SUITE.tests[0].name}  First One
    Should Be Equal  ${SUITE.tests[1].name}  Second One

Split Level 1
    @{files} =  Run Nested Suite With Given Split Level  1
    Should Be True  len(@{files}) == 7
    Should Be Equal  @{files}[0]  ${OUTBASE}-001.xml  fourth.html
    Should Be Equal  @{files}[1]  ${OUTBASE}-002.xml  subsuites/
    Should Be Equal  @{files}[2]  ${OUTBASE}-003.xml  subsuites2/
    Should Be Equal  @{files}[3]  ${OUTBASE}-004.xml  tsuite1.html
    Should Be Equal  @{files}[4]  ${OUTBASE}-005.xml  tsuite2.html
    Should Be Equal  @{files}[5]  ${OUTBASE}-006.xml  tsuite3.html
    Should Be Equal  @{files}[6]  ${OUTBASE}.xml  index
    Should Be Equal  ${SUITE.suites[0].tests[0].name}  Suite4 First
    Should Be Equal  ${SUITE.suites[1].suites[0].tests[0].name}  SubSuite1 First
    Should Be Equal  ${SUITE.suites[-1].tests[-1].name}  Suite3 First
    Index Should Contain Src Links  
    ...  Fourth      ${OUTBASE}-001.xml
    ...  Subsuites   ${OUTBASE}-002.xml
    ...  Subsuites2  ${OUTBASE}-003.xml
    ...  Tsuite1     ${OUTBASE}-004.xml
    ...  Tsuite2     ${OUTBASE}-005.xml
    ...  Tsuite3  ${OUTBASE}-006.xml

Split Level 2
    @{files} =  Run Nested Suite With Given Split Level  2
    Should Be True  len(@{files}) == 4
    Should Be Equal  @{files}[0]  ${OUTBASE}-001.xml  subsuites/sub1.html
    Should Be Equal  @{files}[1]  ${OUTBASE}-002.xml  subsuites/sub2.html
    Should Be Equal  @{files}[2]  ${OUTBASE}-003.xml  subsuites2/subsuite3.html
    Should Be Equal  @{files}[3]  ${OUTBASE}.xml  index
    Index Should Contain Src Links  
    ...  Sub1       ${OUTBASE}-001.xml
    ...  Sub2       ${OUTBASE}-002.xml
    ...  Subsuite3  ${OUTBASE}-003.xml

Split Level 3
    @{files} =  Run Deeply Nested Suite With Given Split Level  3
    Should Be True  len(@{files}) == 6
    Should Be Equal  @{files}[0]  ${OUTBASE}-001.xml  misc/suites/multiple_suites/02__subsuite1/first__suite4.html
    Should Be Equal  @{files}[1]  ${OUTBASE}-002.xml  misc/suites/multiple_suites/02__subsuite1/second__suite2.html
    Should Be Equal  @{files}[2]  ${OUTBASE}-003.xml  misc/suites/subsuites/sub1.html
    Should Be Equal  @{files}[3]  ${OUTBASE}-004.xml  misc/suites/subsuites/sub2.html
    Should Be Equal  @{files}[4]  ${OUTBASE}-005.xml  misc/suites/subsuites2/subsuite3.html
    Should Be Equal  @{files}[5]  ${OUTBASE}.xml  index
    Index Should Contain Src Links
    ...  Suite4     ${OUTBASE}-001.xml
    ...  Suite2     ${OUTBASE}-002.xml
    ...  Sub1       ${OUTBASE}-003.xml
    ...  Sub2       ${OUTBASE}-004.xml
    ...  Subsuite3  ${OUTBASE}-005.xml

*** Keywords ***
Run Suite With Two Sub Suites So That Output Is Split
    My Run Tests  --splitoutputs 1 --variable SLEEP:1.1sec  misc${/}suites${/}subsuites

Run Nested Suite With Given Split Level
    [Arguments]  ${level}
    @{files} =  My Run Tests  --SplitOutputs ${level}  misc${/}suites  FAIL
    [Return]  @{files}

Run Deeply Nested Suite With Given Split Level
    [Arguments]  ${level}
    @{files} =  My Run Tests  --SplitOutputs ${level}  misc  FAIL
    [Return]  @{files}

My Run Tests
    [Arguments]  ${args}  ${path}  ${status}=PASS
    Run Tests  ${args}  ${path}
    Should Be Equal  ${SUITE.status}  ${status}
    @{files} =  List Directory  ${OUTDIR}  ${OUTBASE}*.xml
    [Return]  @{files}

Index Should Contain Src Links
    [Arguments]  @{names_and_links}
    ${output} =  Get File  ${OUTDIR}${/}${OUTBASE}.xml
    :FOR  ${name}  ${link}  IN  @{names_and_links}
    \  Index Should contain Src Link  ${output}  ${name}  ${link}
    ${suites} =  Get Lines Containing String  ${output}  <suite${SPACE}
    Should Be True  ${suites.count('src="')} == len(@{names_and_links})/2

Index Should Contain Src Link
    [Arguments]  ${output}  ${name}  ${link}
    ${pattern} =  Catenate  SEPARATOR=\n  <suite( src="${link}"| name="${name}"| source=".*"){3}>  (<doc>.*</doc>|<doc/>)  <metadata>\n (<item name=".*">.*</item>\n)*</metadata>  <status .*>  </suite>
    Log  ${pattern}
    Should Match Regexp  ${output}  ${pattern}

