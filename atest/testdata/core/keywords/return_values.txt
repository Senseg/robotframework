*** Settings ***
Library         ExampleLibrary
Library         ExampleJavaLibrary

*** Test Cases ***
Set Simple Scalar Variable
    ${setvar} =  Set Variable  this value is set
    Should Be Equal  ${setvar}  this value is set

Set Empty Scalar Variable
    ${setvar} =  Set Variable  ${EMPTY}
    Should Be Equal  ${setvar}  ${EMPTY}

Set List To Scalar Variable
    ${setvar} =  Create List  a  b  c
    Should Be Equal  ${setvar[0]}  a
    Should Be Equal  ${setvar[1]}  b
    Should Be Equal  ${setvar[2]}  c

Set Multible Scalar Variables
    ${var1}  ${var2} =  Create List  one  two
    Should Be Equal  ${var1}  one
    Should Be Equal  ${var2}  two

Set With = Mark
    ${var} =  Se TV Ari able  hello
    Should Be Equal  ${var}  hello
    ${v1}  ${v2} =  Set  hi  you
    Should Be Equal  ${v1}  hi
    Should Be Equal  ${v2}  you
    @{list} =  Set  a  b  c
    Should Be Equal  @{list}[0] @{list}[1] @{list}[2]  a b c

Set Python Object To Scalar Variable
    ${var} =  Return Object  This is my name
    Should Be Equal  ${var.name}  This is my name

Set None To Scalar Variable
    ${var} =  Evaluate  None
    Fail Unless  ${var} is None
    Fail If Equal  ${var}  None

Set List Variable
    @{listvar} =  Create List  h  e  ll  o
    Should Be Equal  @{listvar}[0]  h
    Should Be Equal  @{listvar}[1]  e
    Should Be Equal  @{listvar}[2]  ll
    Should Be Equal  @{listvar}[3]  o

Set Long String To Scalar Variable
    ${var_300} =  Set Variable  123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890
    Should Be Equal  123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890  ${var_300}

Set Long Values To List Variable
    ${100_marks} =  Set Variable  123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 1234567890
    @{listvar} =  Create List  ${100_marks}  ${100_marks}  ${100_marks}
    Should Be Equal  ${100_marks}  @{listvar}[0]
    Should Be Equal  ${100_marks}  @{listvar}[1]
    Should Be Equal  ${100_marks}  @{listvar}[2]

Set Scalar Variables With More Values Than Variables
    [Documentation]  Extra string variables are added to last scalar variable as list
    ${a}  ${b}  ${c} =  List  a  b  c  d
    ...  e  f
    Should Be Equal  ${a}  a
    Should Be True  '${b}' == 'b'
    Should Be True  ${c} == ['c', 'd', 'e', 'f']

Set Multiple Scalars With Too Few Values
    [Documentation]  FAIL Cannot assign return value of keyword 'BuiltIn.Create List' to variables '\${a}', '\${b}' and '\${c}': Need more values than 2
    ${a}  ${b}  ${c} =  Create List  a  b

Set Multiple Scalars When No List Returned
    [Documentation]  FAIL Cannot assign return value of keyword 'BuiltIn.Set Variable' to variables '\${a}' and '\${b}': Expected list, got string instead
    ${a}  ${b} =  Set Variable  This is not list

Set List When No List Returned
    [Documentation]  FAIL Cannot assign return value of keyword 'BuiltIn.Set Variable' to variable '\@{list}': Expected list, got integer instead
    @{list} =  Set Variable  ${42}

Set List To Scalar And List Varibles
    ${a}  ${b}  @{c} =  Create List  1  2  c  d
    ...  e  f
    Should Be True  ${a} + ${b} == 3
    Should Be True  @{c} == ['c', 'd', 'e', 'f']
    Should Be Equal  @{c}[1]@{c}[2]@{c}[3] @{c}[3]oo(@{c}[0]): print @{c}[0]  def foo(c): print c

Assigning One None To Multiple Variables
    ${x}  ${y} =  Run Keyword If  False  Not Executed
    Should Be Equal  ${x}  ${None}
    Should Be Equal  ${y}  ${None}

Assigning None To List Variable
    @{list} =  Log  This returns None
    Should Be True  @{list} == []

Assigning One None To Scalar Variables And List Variable
    ${a}  ${b}  ${c}  @{d} =  No Operation
    Should Be Equal  ${a}  ${None}
    Should Be Equal  ${b}  ${None}
    Should Be Equal  ${c}  ${None}
    Should Be True  @{d} == []

No Keyword
    [Documentation]  FAIL Syntax error: No keyword specified
    ${nokeyword}

Failing Set Keyword
    [Documentation]  FAIL Failing instead of returning
    ${ret} =  Fail  Failing instead of returning

Failing Set Keyword And Teardown
    [Documentation]  FAIL Failing, again, instead of returning\n  \n  Also teardown failed:\n  Teardown fails but it is executed normally
    ${ret} =  Fail  Failing, again, instead of returning
    [Teardown]  Fail  Teardown fails but it is executed normally

