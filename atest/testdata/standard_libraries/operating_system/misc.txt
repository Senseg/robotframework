*** Settings ***
Suite Teardown  Remove Temps
Test Setup      Remove Temps
Library         OperatingSystem

*** Variables ***
${TESTFILE}  ${CURDIR}${/}robot_temp_file.txt
${TESTDIR}  ${CURDIR}${/}robot_temp_dir

*** Test Cases ***
Get Modified Time As Timestamp
    ${time1} =  Get Modified Time  ${CURDIR}
    Log  ${time1}
    Create File  ${TESTFILE}  hello
    ${time2} =  Get Modified Time  ${TESTFILE}
    Log  ${time2}
    Should Be True  '${time2}' >= '${time1}'
    Should Match Regexp  ${time1}  \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}

Get Modified Time As Seconds After Epoch
    ${dirtime} =  Get Modified Time  ${CURDIR}  epoch
    Should Be True  1000000000 < ${dirtime} < 2000000000
    ${current} =  Get Time  epoch
    Should Be True  ${current} >= ${dirtime}

Get Modified Time As Parts
    ${year} =  Get Modified Time  ${CURDIR}  year
    Should Be True  2000 < ${year} < 2100
    ${yyyy}  ${mm}  ${dd} =  Get Modified Time  ${CURDIR}  year, month, day
    Should Be Equal  ${yyyy}  ${year}
    Comment  Must use 'int', because otherwise 08 and 09 cause problems.  They are thougt to be octal but there is no such octal numbers as 08 or 09.
    Should Be True  1 <= int('${mm}') <= 12
    Should Be True  1 <= int('${dd}') <= 31
    @{time} =  Get Modified Time  ${CURDIR}  year, sec, min, hour
    Should Be Equal  @{time}[0]  ${year}
    Should Be True  0 <= int('@{time}[1]') <= 23
    Should Be True  0 <= int('@{time}[2]') <= 59
    Should Be True  0 <= int('@{time}[3]') <= 59

Get Modified Time Fails When Path Does Not Exist
    [Documentation]  FAIL Getting modified time of '${CURDIR}${/}does_not_exist' failed: Path does not exist
    Get Modified Time  ${CURDIR}${/}does_not_exist

Set Modified Time Using Epoch
    [Documentation]  FAIL Setting modified time of '${TESTFILE}' failed: Epoch time must be positive (got -1)
    Create File  ${TESTFILE}
    Set Modified Time  ${TESTFILE}  1177575740
    ${mtime} =  Get Modified Time  ${TESTFILE}
    Should Be Equal  ${mtime}  2007-04-26 11:22:20
    Set Modified time  ${TESTFILE}  -1

Set Modified Time Using Timestamp
    [Documentation]  FAIL Setting modified time of '${TESTFILE}' failed: Invalid time format 'invalid'
    Create File  ${TESTFILE}
    :FOR  ${timestamp}  IN  2007-04-26 11:22:30  20070426 11:22:30  20070426 112230  20070426-112230  20070426 11:22:30.456
    ...  20070426 11:22:29.9  invalid
    \  Set Modified Time  ${TESTFILE}  ${timestamp}
    \  ${mtime} =  Get Modified Time  ${TESTFILE}  epoch
    \  Should Be Equal  ${mtime}  ${1177575750}

Set Modified Time Using NOW
    [Documentation]  FAIL Setting modified time of '${TESTFILE}' failed: Invalid time string 'invalid'
    Create File  ${TESTFILE}
    ${t0} =  Get Modified Time  ${TESTFILE}  epoch
    Sleep  1.1 s
    Set Modified Time  ${TESTFILE}  NOW
    ${t1} =  Get Modified Time  ${TESTFILE}  epoch
    Should Be True  ${t0} < ${t1} < ${t0}+5
    Set Modified Time  ${TESTFILE}  NOW-1day
    ${t2} =  Get Modified Time  ${TESTFILE}  epoch
    Should Be True  ${t2}-4 <= ${t1} - 24*60*60 <= ${t2}
    Set Modified Time  ${TESTFILE}  now + 1 day 2 hour 3 min 4 seconds 10 ms
    ${t3} =  Get Modified Time  ${TESTFILE}  epoch
    Should Be True  ${t3}-9 <= ${t1} + (24*60*60 + 2*60*60 + 3*60 + 4) <= ${t3}
    Set Modified Time  ${TESTFILE}  NOW + invalid

Set Modified Time Fails When Path Does Not Exist
    [Documentation]  FAIL Setting modified time of '${CURDIR}${/}does_not_exist' failed: File does not exist
    Set Modified Time  ${CURDIR}${/}does_not_exist  0

Set Modified Time Fails When Path Is Directory
    [Documentation]  FAIL Setting modified time of '${CURDIR}' failed: Modified time can only be set to regular files
    Set Modified Time  ${CURDIR}  0

Get File Size
    Create File  ${TESTFILE}
    ${size} =  Get File Size  ${TESTFILE}
    Should Be Equal  ${size}  ${0}
    Create File  ${TESTFILE}  x
    ${size} =  Get File Size  ${TESTFILE}
    Should Be Equal  ${size}  ${1}
    Create File  ${TESTFILE}  some content
    ${size} =  Get File Size  ${TESTFILE}
    Should Be Equal  ${size}  ${12}
    ${size} =  Get File Size  ${CURDIR}/misc.html
    Should Be True  ${size} > 1000

List Directory
    [Documentation]  This test also tests setting variables
    Create Dir  ${TESTDIR}
    Create File  ${TESTDIR}${/}foo.txt
    Create File  ${TESTDIR}${/}bar.txt
    ${files} =  List Directory  ${TESTDIR}
    Should Be True  ${files} == ['bar.txt','foo.txt']
    @{files2} =  List Directory  ${TESTDIR}
    Should Be Equal  @{files2}[0]  bar.txt
    Should Be Equal  @{files2}[1]  foo.txt
    ${file}  @{files3} =  List Dir  ${TESTDIR}
    Should Be Equal  ${file}  bar.txt
    Should Be Equal  @{files3}[0]  foo.txt
    Remove File  ${TESTDIR}${/}bar.txt
    ${files4} =  List Directory  ${TESTDIR}
    Should Be True  ${files4} == ['foo.txt']
    @{files5} =  List Directory  ${TESTDIR}
    Should Be Equal  @{files5}[0]  foo.txt
    ${file2}  @{files6} =  List Dir  ${TESTDIR}
    Should Be Equal  ${file2}  foo.txt
    Should Be True  @{files6} == []
    Remove File  ${TESTDIR}${/}foo.txt
    ${files7} =  List Directory  ${TESTDIR}
    Should Be True  ${files7} == []
    @{files8} =  List Directory  ${TESTDIR}
    Should Be True  @{files8} == []

List Directory With Patterns
    Comment  0) Setup
    Create Directory  ${TESTDIR}
    Create File  ${TESTDIR}${/}foo.txt
    Create File  ${TESTDIR}${/}bar.txt
    Create Directory  ${TESTDIR}${/}foodir
    Comment  1) Simple pattern
    ${names} =  List Directory  ${TESTDIR}  *.txt
    Should Be True  ${names} == ['bar.txt', 'foo.txt']
    Comment  2) Case-insensitive simple pattern
    ${names} =  List Directory  ${TESTDIR}  ???.TXT  case-insensitive simple pattern
    Should Be True  ${names} == ['bar.txt', 'foo.txt']
    Comment  3) Regexp pattern
    ${names} =  List Directory  ${TESTDIR}  o+  this is regexp
    Should Be True  ${names} == ['foo.txt', 'foodir']
    ${names} =  List Directory  ${TESTDIR}  (?i)FO{2}  regular expression
    Should Be True  ${names} == ['foo.txt', 'foodir']
    Comment  4) Case-insensitive
    ${names} =  List Directory  ${TESTDIR}  FOO  CaseInsensitive
    Should Be True  ${names} == ['foo.txt', 'foodir']
    Comment  5) Literal string
    ${names} =  List Directory  ${TESTDIR}  foo  literal string
    Should Be True  ${names} == ['foo.txt', 'foodir']
    ${names} =  List Directory  ${TESTDIR}  ?oodi*  \
    Should Be True  ${names} == ['foodir']

List Directory With Absolute
    [Documentation]  This tests also List Files In Directory And List Directories In Directory
    Create Directory  ${TESTDIR}
    Create File  ${TESTDIR}${/}foo.txt
    Create File  ${TESTDIR}${/}bar.txt
    Create Directory  ${TESTDIR}${/}foodir
    ${names} =  List Directory  ${TESTDIR}  ${EMPTY}  ${EMPTY}  absolute
    Log  ${names}
    Should Be Equal  ${names[0]}  ${TESTDIR}${/}bar.txt
    Should Be Equal  ${names[1]}  ${TESTDIR}${/}foo.txt
    Should Be Equal  ${names[2]}  ${TESTDIR}${/}foodir
    ${names} =  List Files In Directory  ${TESTDIR}  ${EMPTY}  ${EMPTY}  absolute
    Should Be Equal  ${names[0]}  ${TESTDIR}${/}bar.txt
    Should Be Equal  ${names[1]}  ${TESTDIR}${/}foo.txt
    ${names} =  List Directories In Directory  ${TESTDIR}  ${EMPTY}  ${EMPTY}  absolute
    Should Be Equal  ${names[0]}  ${TESTDIR}${/}foodir

List And Count Files And Directories In Directory
    [Documentation]  Tests 'List Files In Directory', 'List Directories In Directory', 'Count Files In Directory', 'Count Directories In Directory' and 'Count Items In Directory'
    Comment  0) Setup
    Create Dir  ${TESTDIR}
    Create File  ${TESTDIR}${/}foo.txt
    Create File  ${TESTDIR}${/}bar.txt
    Create File  ${TESTDIR}${/}zap.txt
    Create Dir  ${TESTDIR}${/}foodir
    Create Dir  ${TESTDIR}${/}bardir
    Comment  1) List Files In Dir
    ${files} =  List Files In Directory  ${TESTDIR}
    ${bar_files} =  List Files In Directory  ${TESTDIR}  bar*
    Should Be True  ${files} == ['bar.txt','foo.txt','zap.txt']
    Should Be True  ${bar_files} == ['bar.txt']
    Comment  2) List Dirs In Dir
    ${dirs} =  List Directories In Directory  ${TESTDIR}
    ${foo_dirs} =  List Directories In Directory  ${TESTDIR}  o+  R E G E X P
    Should Be True  ${dirs} == ['bardir', 'foodir']
    Should Be True  ${foo_dirs} == ['foodir']
    ${file_count} =  Count Files In Directory  ${TESTDIR}
    ${txt_file_count} =  Count Files In Directory  ${TESTDIR}  *.TXT  case-insensitive glob
    Should Be Equal  ${file_count}  ${3}
    Should Be Equal  ${file_count}  ${txt_file_count}
    Comment  4) Count Dirs In Dir
    ${dir_count} =  Count Directories In Directory  ${TESTDIR}
    ${dir_dir_count} =  Count Directories In Directory  ${TESTDIR}  dir  literal
    Should Be Equal  ${dir_count}  ${2}
    Should Be Equal  ${dir_count}  ${dir_dir_count}
    Comment  5) Count Items In Dir
    ${count} =  Count Items In Directory  ${TESTDIR}
    ${foo_count} =  Count Items In Directory  ${TESTDIR}  foo*
    Should Be Equal  ${count}  ${5}
    Should Be Equal  ${foo_count}  ${2}
    Comment  6) Misc tests
    ${html_file_count} =  Count Files In Directory  ${CURDIR}  *.html
    ${html_dir_count} =  Count Directories In Directory  ${CURDIR}  *.html
    ${html_item_count} =  Count Items In Directory  ${CURDIR}  *.html
    Should Be True  ${html_file_count} > 0
    Should Be Equal  ${html_dir_count}  ${0}
    Should Be Equal  ${html_file_count}  ${html_item_count}

Touch
    Should Not Exist  ${TESTFILE}
    Touch  ${TESTFILE}
    File Should Be Empty  ${TESTFILE}
    ${time1} =  Get Modified Time  ${TESTFILE}  epoch
    Sleep  1.1 s
    Touch  ${TESTFILE}
    ${time2} =  Get Modified Time  ${TESTFILE}  epoch
    Should Be True  ${time2} > ${time1}
    Create File  ${TESTFILE}  Some text\nin 2 lines\n
    Touch  ${TESTFILE}
    ${content} =  Get File  ${TESTFILE}
    Should Be Equal  ${content}  Some text\nin 2 lines\n

Touch Dir Fails
    [Documentation]  FAIL Cannot touch '${CURDIR}' because it is a directory
    Touch  ${CURDIR}

Touch When Parent Does Not Exist Fails
    [Documentation]  FAIL Cannot touch '${TESTDIR}${/}file.txt' because its parent directory does not exist
    Fail If Dir Exists  ${TESTDIR}
    Touch  ${TESTDIR}/file.txt

*** Keywords ***
Remove Temps
    Remove File  ${TESTFILE}
    Remove Dir  ${TESTDIR}  recursive

